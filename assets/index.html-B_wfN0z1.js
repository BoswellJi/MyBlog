import{_ as e,c as m,b as o,o as s}from"./app-B56A7WC8.js";const c={};function i(t,a){return s(),m("div",null,a[0]||(a[0]=[o('<p>知名设计书<code>领域驱动方面</code>的术语，正确的指出：</p><p><code>一个设计模式名称，抽象，共同设计结构的关键方面，会对创建一个可复用的面向对象设计很有用。参与类和它们的实例的设计模式标识，它们的角色，合作，责任的分发</code>。</p><p><code>每一个设计模式聚焦在一个特定的面向对象设计问题。在它应用时候，会描述它，它能不能在其他设计约束的视图中应用，以及结果和它的用法的平衡。因为我们最终一定会实现我们的设计，一个设计模式还提供案例，说明实现的代码。</code></p><p><code>即使设计模式描述面向对象设计，但是它们还是基于在主流面向对象编程语言中已经实现的实用的解决方案......</code></p><p>设计模式被划分到许多不同分类。在这章中，在探索特定模式更多细节前，我们会查看这些分类中的三种以及简短提到几个针对这些分类的模式案例。</p><h2 id="创建型设计模式" tabindex="-1"><a class="header-anchor" href="#创建型设计模式"><span>创建型设计模式</span></a></h2><p>创建型设计模式聚焦在处理对象的创建机制，其中对象用适合我们所处情况的方式来创建。否则，对象创建的基础方法可能导致项目的复杂度增加，虽然这些模式的目的是通过控制创建过程来解决这个问题。</p><p>模式中的一些被归入这个分类：构造器，工厂，抽象，原型，单例，建造者。</p><h2 id="结构型设计模式" tabindex="-1"><a class="header-anchor" href="#结构型设计模式"><span>结构型设计模式</span></a></h2><p>结构型模式关注对象组合以及通常确定实现不同对象之间关系的简单方法。在一个系统一部分更改的时候，它们有助于确保当系统的某个部分发生变化时，系统的整个结构不需要做同样的事情。它们也帮助将系统中不适合特定目的的部分重构到那些适合特定目的部分中。</p><p>被归入这个分类的模式：装饰器，门面，享元，适配器，代理。</p><h2 id="行为型设计模式" tabindex="-1"><a class="header-anchor" href="#行为型设计模式"><span>行为型设计模式</span></a></h2><p>行为型设计模式聚焦在改善或者简化系统中独立对象之间的交流。</p><p>一些行为型模式包括：迭代器，中介者，观察者，访问者。</p>',14)]))}const n=e(c,[["render",i]]),d=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB/","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":1,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":5,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"519ee95c2801bb6ff7b5b33a88bd70a7706d8469","time":1640862235000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat(react): hook"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"e963307b025faae359395d8e53d1b35c90d73c4a","time":1607647015000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"}]},"filePathRelative":"books/javascript/javascript设计模式/6设计模式分类/readme.md"}');export{n as comp,d as data};
