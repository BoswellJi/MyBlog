import{_ as s,c as a,b as e,o as p}from"./app-B56A7WC8.js";const t={};function c(l,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p><em>必备知识</em><em>对于这个章节，你应该粗略的熟悉Promises，但是更多相关的知识在这里还会被回顾到。</em></p><p>在这个章节中，我们会从不同角度来处理Promises：而不是使用这个api,我们将创建一个简单的Promises实现。这个不同的角度曾经帮助我，很好的了解Promises的意义。</p><p>Promise实现是ToyPromise类，为了更容易地理解，它没有完整地匹配api。但是它足够地接近了，仍然能够给我们更深刻地理解Promises是如何工作地。</p><h2 id="刷新者-promise的状态" tabindex="-1"><a class="header-anchor" href="#刷新者-promise的状态"><span>刷新者：Promise的状态</span></a></h2><p>Promise的状态：Promise初始化未开始。如果我们解析它，它会变成完成的，如果我们决绝它，它会变成被拒绝的。</p><p>我们从一个简单的Promises状态如何工作开始：</p><ul><li>一个Promise被初始化为pending</li><li>如果Promise使用v来resloved,它会变成fulfilled（稍后，我们会看到解析还有reject）.现在v是Promise的完成值。</li><li>如果Promise使用error来rejected,它会变成rejected。现在e是Promise的拒绝值。</li></ul><h2 id="版本1-独立的promise" tabindex="-1"><a class="header-anchor" href="#版本1-独立的promise"><span>版本1：独立的Promise</span></a></h2><p>我们第一个实现是带有最小化的功能的Promise：</p><ul><li>我们能创建一个Promise</li><li>我们能解析和拒绝Promise以及我们只能做一次</li><li>我们能通过then()方法注册响应（回调函数）。注册必须处理正确的事情，不管Promise是否已经被稳定还是没稳定。</li><li>then()函数不支持链式，还不能返回任何东西。</li></ul><p>ToyPromise1是一个带有三个原型方法的类：</p><ul><li>ToyPromise1.prototype.resolve(value)</li><li>ToyPromise1.prototype.reject(reason)</li><li>ToyPromise1.prototype.then(onFulfilled, onRejected)</li></ul><p>也就是说，reslove和reject是方法（而且，非函数交给构造函数的回调参数)</p><p>这是第一个实现如何使用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// .resolve() before .then()</span></span>
<span class="line"><span class="token keyword">const</span> tp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToyPromise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tp1<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tp1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// .then() before .resolve()</span></span>
<span class="line"><span class="token keyword">const</span> tp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToyPromise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tp2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">&#39;def&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tp2<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;def&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Promise中的数据流流程图是可选的</em><em>流程图的攻击是对Promises如何工作有一个可视化的解释，但是它们是可选的。如果你发现它们很困惑，你可以忽略它们只关注代码</em></p><ul><li>then()方法</li></ul><p>首先让我们测试then()方法。他应该处理两件事情：</p><ol><li>如果Promise仍然在pending，它对onFulfilled和onRejected的调用进行排队。稍后它们被使用，当Promise稳定下来时。</li><li>如果Promise已经fulfilled或者rejected,onFulfilled或者onRejected会被马上调用。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fulfillmentTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">rejectionTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseState<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;pending&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>_fulfillmentTasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fulfillmentTask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>_rejectionTasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rejectionTask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">addToTaskQueue</span><span class="token punctuation">(</span>fulfillmentTask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;rejected&#39;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">addToTaskQueue</span><span class="token punctuation">(</span>rejectionTask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前的代码片段使用下面的助手函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">addToTaskQueue</span><span class="token punctuation">(</span><span class="token parameter">task</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Promise必须始终异步的解决。那是为什么不能直接执行任务的原因，我们添加他们到事件轮询的任务队列中（浏览器，nodejs）。请注意真实的Promiseapi没有使用常规任务（像setTimeout()），它使用的是微任务。他与当前任务紧耦合以及总是在它之后直接执行。</p><ul><li>reslove()方法</li></ul><p>.reslove()方法像下面工作：如果Promise已经稳定，它就不会在任何事情了（确保一个Promise只能被处理一次）。否则Promise状态改变为fulfilled以及将结果缓存到this.promiseResult中，下一步，目前所有的实现反应都已经被入队，被调用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseState <span class="token operator">!==</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>_promiseState <span class="token operator">=</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>_promiseResult <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_clearAndEnqueueTasks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_fulfillmentTasks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// enable chaining</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">_clearAndEnqueueTasks</span><span class="token punctuation">(</span><span class="token parameter">tasks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>_fulfillmentTasks <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>_rejectionTasks <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  tasks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>addToTaskQueue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reject()与reslove()相似。</p><h2 id="版本2-then-链式调用" tabindex="-1"><a class="header-anchor" href="#版本2-then-链式调用"><span>版本2：.then()链式调用</span></a></h2><p>我们实现的下一个特性是链锁：我们从实现反应或者拒绝反应中返回一个值可以有下面的then()函数中的完成响应来处理。（在下个版本中，链锁将变得更加有用，因为返回Promise的特殊支持）</p><p>下面的案例：</p><ol><li>第一then()函数：我们返回完成反应中的值</li><li>第二then()函数：我们通过完成反应接收值</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">ToyPromise2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;result1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&#39;result1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;result2&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&#39;result2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的案例：</p><ol><li>第一then()函数：我们返回拒绝反应中的值</li><li>第二then()函数：我们通过拒绝反应接收值</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">ToyPromise2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;error1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&#39;error1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&#39;result2&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&#39;result2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="便利的catch" tabindex="-1"><a class="header-anchor" href="#便利的catch"><span>便利的catch()</span></a></h2><p>新的版本引入了一个方便的catch方法，它让只提供一个拒绝反应更加容易。请注意只提供一个完成响应已经很容易- 我们取消then()函数的第二个参数很简单（看前一个例子）</p><p>如果我们使用前一个例子看起来会更好：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">new</span> <span class="token class-name">ToyPromise2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;error1&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// (A)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&#39;error1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;result2&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">&#39;result2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的两个方法调用相同：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>rejectionReaction<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> rejectionReaction<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是catch()方法如何被实现的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// [new]</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取消响应" tabindex="-1"><a class="header-anchor" href="#取消响应"><span>取消响应</span></a></h2><p>如果我们省略一个履行反应，新版本也会转发履行，如果我们省略一个拒绝反应，它会转发拒绝。这为什么有用呢？</p><p>下面的案例演示传递拒绝：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">someAsyncFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fulfillmentReaction1<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fulfillmentReaction2<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>rejectionReaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rejectionReaction现在可以处理someAsyncFunction()，fulfillmentReaction1，fulfillmentReaction2的拒绝。</p><p>下面的案例演示了传递完成：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">someAsyncFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>rejectionReaction<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fulfillmentReaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果someAsyncFunction()拒绝它的Promise，rejectionReaction能修复无论什么错误并且还返回一个完成值，之后由fulfillmentReaction处理。</p><p>如果someAsyncFunction()完成它的Promise，fulfillmentReaction还可以处理，因为catch函数会被跳过。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>这一切在幕后是如何处理的？</p><ul><li>then方法返回一个解析的Promise，无论是返回onFulfilled还是onRejected。</li><li>如果onFulfilled和onRejected丢失，则将接收到的内容传递给then()返回的Promise。</li></ul><p>只要then函数改变：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> resultPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ToyPromise2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [new]</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">fulfillmentTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> returned <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      resultPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>returned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [new]</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// [new]</span></span>
<span class="line">      <span class="token comment">// \`onFulfilled\` is missing</span></span>
<span class="line">      <span class="token comment">// =&gt; we must pass on the fulfillment value</span></span>
<span class="line">      resultPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">rejectionTask</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> returned <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      resultPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>returned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [new]</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// [new]</span></span>
<span class="line">      <span class="token comment">// \`onRejected\` is missing</span></span>
<span class="line">      <span class="token comment">// =&gt; we must pass on the rejection value</span></span>
<span class="line">      resultPromise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_promiseResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  ···</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> resultPromise<span class="token punctuation">;</span> <span class="token comment">// [new]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then函数创建和返回一个新的Promise（方法的第一行和最后一行）。 额外地：</p><ul><li><p>fulfillmentTask工作不同。这是现在完成之后发生的事情:</p><ul><li>如果提供了onFulfilled函数，他会被调用，并且它的结果被用来解析resultPromise</li><li>如果没有onFulfilled函数，我们使用当前Promise的完成值来解析resultPromise</li></ul></li><li><p>rejectionTask工作不同。这是现在拒绝之后发生的事情：</p><ul><li>如果提供了onRejected函数，它会被调用并且它的结果被用来解析resultPromise,请注意resultPromise不是拒绝：我们假设无论有什么问题都被onRejected修复。</li><li>如果没有onRejected函数，我们使用当前Promise的拒绝值来决绝resultPromise。</li></ul></li></ul><h2 id="版本3-扁平的then-回调函数返回的promises" tabindex="-1"><a class="header-anchor" href="#版本3-扁平的then-回调函数返回的promises"><span>版本3：扁平的then()回调函数返回的Promises</span></a></h2><ul><li>then()方法的回调函数返回Promises</li></ul><p>扁平的Promise大部分是关于使得链锁更加方便：如果我们想要从then回调传递值到下一个，我们用这个格式返回它。在那之后，then函数把它放到已经返回的Promise中。</p><p>如果我们从then回调中返回一个Promise,这种方式会变得不方便。例如：基于Promise函数的结果：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">asyncFunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> <span class="token string">&#39;Result of asyncFunc1()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">asyncFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (A)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result2Promise</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  result2Promise</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// (B)</span></span>
<span class="line">    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span></span>
<span class="line">      result2<span class="token punctuation">,</span> <span class="token string">&#39;Result of asyncFunc2()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，在行A返回的值进入到由then返回的Promise，强迫我们不包裹行B的Promise。如果能代替就好了，行A返回的Promise替换then返回的Promise。目前还不清楚具体如何做到这一点。但是如果它工作，它能让我们像这样编写我们的代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">asyncFunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> <span class="token string">&#39;Result of asyncFunc1()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">asyncFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (A)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// result2 is the fulfillment value, not the Promise</span></span>
<span class="line">  assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span></span>
<span class="line">    result2<span class="token punctuation">,</span> <span class="token string">&#39;Result of asyncFunc2()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行A中，我们返回了一个Promise。感谢链式的Promise,result2是Promise的完成值，不是Promise本身。</p><ul><li>扁平使得Promises状态更复杂</li></ul><p><em>es规格中的扁平化的romise</em><em>es规格中，扁平化的Promise的细节在Prmise Object节被描述</em></p><p>Promise Api如何处理扁平化？</p><p>如果一个Promise P被使用Promise Q来解析，之后P没有报错Q,P变成了Q:现在状态和P的结算值总是和Q的相同。他使用then方法来帮助我们，因为then()函数解析它返回的Promise和它回调之一的返回值。</p><p>P如何变成Q?通过锁定Q:P变成了外部的，不可解析的以及Q的</p><ul><li>实现扁平的Promises</li></ul><p>我们通过这个函数来检测then功能：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">isThenable</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// [new]</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword">null</span></span>
<span class="line">    <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了实现锁住，我们引入一个新的标识_alreadyResolved,把它设置为true,来无效reslove,reject，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// [new]</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_alreadyResolved<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>_alreadyResolved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isThenable</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Forward fulfillments and rejections from \`value\` to \`this\`.</span></span>
<span class="line">    <span class="token comment">// The callbacks are always executed asynchronously</span></span>
<span class="line">    value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_doFulfill</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_doReject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_doFulfill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// enable chaining</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="版本4-在响应回调中抛出异常" tabindex="-1"><a class="header-anchor" href="#版本4-在响应回调中抛出异常"><span>版本4：在响应回调中抛出异常</span></a></h2><h2 id="版本5-揭示构造函数模式" tabindex="-1"><a class="header-anchor" href="#版本5-揭示构造函数模式"><span>版本5：揭示构造函数模式</span></a></h2>`,79)]))}const o=s(t,[["render",c]]),u=JSON.parse('{"path":"/books/javascript/%E6%B7%B1%E5%B1%82javascript%EF%BC%9A%E7%90%86%E8%AE%BA%E5%92%8C%E6%8A%80%E5%B7%A7/7%E5%85%B6%E4%BB%96%E8%AF%9D%E9%A2%98/17%E9%80%9A%E8%BF%87%E5%AE%9E%E7%8E%B0%E5%AE%83%E4%BB%AC%E4%BA%86%E4%BA%86%E8%A7%A3Promise.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":18,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"6482ba11c6b25aa6d86c0e868175cadcc0d85988","time":1606558627000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"7d5457615a584cd53d1c51948f72f2112b04421a","time":1605873775000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"58b45d11d3b8fafc0c5134be508444ea1f41d6bd","time":1603972728000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"javascript:书"},{"hash":"f9e178dd4dae9182f2693a6a1cf112b99fe6e162","time":1603970039000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"javascript:书"},{"hash":"61b2bb735d369e9817950524f184d47d78c5bf9c","time":1599475546000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"webgl："},{"hash":"2588ecbf370e3d7565203fdf3c6bc1dd9b7b343f","time":1598440472000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"算法+英语："},{"hash":"f84f48ca2b46b48d67e6442134732dd42c11a116","time":1597766382000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"jacascript"},{"hash":"b5bfb66219bb9504b28f6e7874430cdf50311d19","time":1597590917000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"19e9eb18c66100cfc59e853a51f91f7efd0f5f12","time":1596989722000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/深层javascript：理论和技巧/7其他话题/17通过实现它们了了解Promise.md"}');export{o as comp,u as data};
