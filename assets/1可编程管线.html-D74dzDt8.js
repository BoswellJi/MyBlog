import{_ as a,c as i,b as t,o}from"./app-B56A7WC8.js";const m={};function s(c,e){return o(),i("div",null,e[0]||(e[0]=[t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li>opengl1.1使用固定功能管线；</li><li>opengl2.0使用可编程管线；</li><li>webgl只能，必须使用可编程管线；</li><li>webgl2.0在2017.1发布；</li></ul><h2 id="webgl图形上下文" tabindex="-1"><a class="header-anchor" href="#webgl图形上下文"><span>webgl图形上下文</span></a></h2><h2 id="着色器程序" tabindex="-1"><a class="header-anchor" href="#着色器程序"><span>着色器程序</span></a></h2><h2 id="管线中的数据流" tabindex="-1"><a class="header-anchor" href="#管线中的数据流"><span>管线中的数据流</span></a></h2><p>webgl图形管线渲染一张图片。定义图片的数据来自javascript。 当数据被传递到管线中时，她被当前的顶点着色器和片元着色器以及管线的固定功能阶段来处理。你需要理解数据是如何被javascript放进管线的以及当它被传递到管线中时，数据是如何被处理的。</p><p>在webgl中的基础操作是画一个几何元件；webgl只使用在子章节3.1.1中引入的opengl元件中的七个，画四边形和多边形的元件被移除；剩余的是画点，线段，三角形的元件。在webgl中，通过在webgl图形上下文gl上的， <code>gl.POINTS</code>，<code>gl.LINES</code>, <code>gl.LINE_STRIP</code>，<code>gl.LINE_LOOP</code>，<code>gl.TRIANGLES</code>，<code>gl.TRIANGLES_STRIP</code>，和<code>gl. TRIANGLES_FAN</code>常数，来识别元件的七种类型。</p><p>当webgl被用于画一个元件时，有两个提供给元件数据的一般类目。两中数据是指<code>attribute variables</code>和<code>uniform variables</code>。一个元件通过它的类型和顶点列表来定义。<code>attribute</code>和<code>uniform</code>之间的不同是，uniform变量有一个单一的值，整个元件都是相同的，然而attribute变量的值，不同顶点都是不同的。</p><p>总是被指定的一个attribute是，顶点的坐标。顶点坐标系必须是一个attribute，因为元件中的每个顶点都有自己坐标设置。另一个可能的attribute是颜色。我们已经看到，opengl允许你给元件的每一个顶点指定不同的颜色。在webgl中，你可以做一样的事情，并且在那个案例中，颜色成为一个attribute.另一方面，你想要整个元件都一样，uniform颜色；在那个案例中，颜色成为一个uniform变量。其他能够即是attribute又是uniform的工程量，取决你的需要，包括法线向量，素材属性，纹理坐标，如果它们被使用，尽可能包含在一个attribute中，因为在一个元件中所有的顶点有相同的纹理坐标是真的没有意义的。如果一个几何变换被应用到元件上，他将会自然的表示为一个uniform变量。</p><p>但是，重要的是理解，webgl不能结合任何预定义的attribute,甚至连一个顶点坐标系都没有，在可编程管线中，被使用的attribute和uniforms整个都是程序员的责任。目前webgl被关注，attributes只是传递到顶点着色器中的值。uniforms能够被传递到顶点着色器和片元着色器，webgl不为这些值赋值。意义由整个着色器处理的值来决定，当画元件时，被使用在绘制的元件中的attributes和uniforms集合由使用中的着色器的源码来决定的。</p><p>要理解这个，我们需要看一看在管线中发生的更多详情。当画一个元件的时候，javascript程序会给在着色器程序中的任何attributes和uniforms指定值。对于每个attributes，它会给每个顶点指定值数组。每个uniforms，它会指定一个单一的值。元件被画之前，值将会被发送到gpu中。当绘制元件时，gpu会给每个顶点调用一次顶点着色器器。被处理的顶点attribues值作为输入被传递到顶点着色器。uniform变量的值也会被传递到顶点着色器。在着色器中，attributes和uniforms都代表全局变量，着色器被调用之前，他的值被设置好。</p><p>作为着色器的输入之一，在裁剪坐标系系统中，顶点着色器必须指定顶点的坐标。通过赋值给命名为<code>gl.Position</code>的指定变量。位置通常是代表对象坐标系系统中的坐标的属性被应用变换来计算的。但是事实上，位置怎么被计算，是程序员的责任。</p><p>在元件中的所有顶点的位置被计算之后，在管线中的一个固定功能阶段会裁剪掉元件超过有效裁剪坐标范围部分的坐标。-1到1，沿着每一个坐标轴</p><h2 id="uniform变量的值" tabindex="-1"><a class="header-anchor" href="#uniform变量的值"><span>Uniform变量的值</span></a></h2><h2 id="attributes的值" tabindex="-1"><a class="header-anchor" href="#attributes的值"><span>Attributes的值</span></a></h2><h2 id="画原始原件" tabindex="-1"><a class="header-anchor" href="#画原始原件"><span>画原始原件</span></a></h2>',16)]))}const n=a(m,[["render",s]]),r=JSON.parse('{"path":"/books/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E6%A6%82%E8%AE%BA/6webgl%E6%A6%82%E8%BF%B0/1%E5%8F%AF%E7%BC%96%E7%A8%8B%E7%AE%A1%E7%BA%BF.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":5,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"9b4204de80f082b8e3ba5a4ffd0a11006a8868fa","time":1604537461000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"webgl: 翻译"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"12d71f5cc816320cfd7a5edb16e6762841b271a1","time":1603371894000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"webgl：翻译"},{"hash":"d35c46fc2d9c35951f76af337277b0d93a118df2","time":1603371894000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"webgl：翻译"}]},"filePathRelative":"books/图形学/计算机图形概论/6webgl概述/1可编程管线.md"}');export{n as comp,r as data};
