import{_ as s,c as a,b as p,o as e}from"./app-B56A7WC8.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>装饰者是致力于促进代码复用的结构化设计模式，和混合模式相似，他们被认为是对象子类化的另一个可行的替代品。</p><p>传统地，装饰者提供动态地再系统现存类中添加行为的能力。思想是装饰自身对类的基本功能不是必要的。否则，它会被放入超类自身。</p><p>它们能够被用来修改现有系统，我们想要在对象中添加额外的特性而不需要严重修改使用它们的底层代码。开发者使用它们的共同理由是，它们的应用可能包含需要大量对象的不同类型。想想一下，比如说，需要定义上百个不同的对象构造器，一个js游戏。</p><p>对象构造器可能代表不同的玩家类型，每个都有不同的能力。指环王游戏可能需要构造器，Hobbit,Elf，Orc, Wizard, Mountain Giant, Stone Giant等等，但是可能轻易的有成百个。如果我们以能力作为考虑因素，想想一下，我们不得不创建子类给每个能力类型的组合，例如：HobbitWithRing等等。这非常不切合实际，而且当我们考虑不同能力的增长数量时，必定不可管理。</p><p>装饰器模式没有严重依赖如何创建对象，而是聚焦在扩展它们的功能的问题。而不是只依赖原型继承，我们与单个基础对象一起工作，并且渐近地添加装饰器对象来提供额外的功能。思想是这个而不是子类，我们添加属性或者方法给基础对象，所以它更加现代化。</p><p>用js添加新属性是非常直接的过程，所以，记住这个，一个非常简单的装饰器获取被实现，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// A vehicle constructor</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span> <span class="token parameter">vehicleType</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// some sane defaults</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>vehicleType <span class="token operator">=</span> vehicleType <span class="token operator">||</span> <span class="token string">&quot;car&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>license <span class="token operator">=</span> <span class="token string">&quot;00000-000&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Test instance for a basic vehicle</span></span>
<span class="line"><span class="token keyword">var</span> testInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span> <span class="token string">&quot;car&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> testInstance <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs:</span></span>
<span class="line"><span class="token comment">// vehicle: car, model:default, license: 00000-000</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Lets create a new instance of vehicle, to be decorated</span></span>
<span class="line"><span class="token keyword">var</span> truck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span> <span class="token string">&quot;truck&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// New functionality we&#39;re decorating vehicle with</span></span>
<span class="line">truck<span class="token punctuation">.</span><span class="token function-variable function">setModel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">modelName</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> modelName<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">truck<span class="token punctuation">.</span><span class="token function-variable function">setColor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">color</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Test the value setters and value assignment works correctly</span></span>
<span class="line">truck<span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span> <span class="token string">&quot;CAT&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">truck<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span> <span class="token string">&quot;blue&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> truck <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs:</span></span>
<span class="line"><span class="token comment">// vehicle:truck, model:CAT, color: blue</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Demonstrate &quot;vehicle&quot; is still unaltered</span></span>
<span class="line"><span class="token keyword">var</span> secondInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span> <span class="token string">&quot;car&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> secondInstance <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs:</span></span>
<span class="line"><span class="token comment">// vehicle: car, model:default, license: 00000-000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单实现的类型是函数，但是它不能真正的演示所有装饰器能够提供的力量。为此，我们首先来看看我对咖啡案例的变化，它来自一本优秀的书《head first design patterns》，它是围绕购买Macbook的模型。</p><h2 id="例子2-使用多个装饰器来装饰对象" tabindex="-1"><a class="header-anchor" href="#例子2-使用多个装饰器来装饰对象"><span>例子2：使用多个装饰器来装饰对象</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// The constructor to decorate</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">MacBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">cost</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">997</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">screenSize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">11.6</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Decorator 1</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">memory</span><span class="token punctuation">(</span> <span class="token parameter">macbook</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> v <span class="token operator">=</span> macbook<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  macbook<span class="token punctuation">.</span><span class="token function-variable function">cost</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> v <span class="token operator">+</span> <span class="token number">75</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Decorator 2</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">engraving</span><span class="token punctuation">(</span> <span class="token parameter">macbook</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> v <span class="token operator">=</span> macbook<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  macbook<span class="token punctuation">.</span><span class="token function-variable function">cost</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> v <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Decorator 3</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">insurance</span><span class="token punctuation">(</span> <span class="token parameter">macbook</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> v <span class="token operator">=</span> macbook<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  macbook<span class="token punctuation">.</span><span class="token function-variable function">cost</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> v <span class="token operator">+</span> <span class="token number">250</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> mb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MacBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">memory</span><span class="token punctuation">(</span> mb <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">engraving</span><span class="token punctuation">(</span> mb <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">insurance</span><span class="token punctuation">(</span> mb <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: 1522</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> mb<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: 11.6</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> mb<span class="token punctuation">.</span><span class="token function">screenSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们的装饰器正在重写MacBook()基类对象的.cost()函数来返回Macbook当前价格加上被指定的更新价值。</p><p>它被认为是一种装饰，就像最初的macbook对象构造器方法，没有被覆盖以及任何其他我们定义为Macbook的一部分的属性保持不变和完整的。</p><p>没有真实的定义一个接口，上面的案例，从创始者移动到接收者时，我们移除了确保对象满足接口的责任。</p><h2 id="仿古装饰器" tabindex="-1"><a class="header-anchor" href="#仿古装饰器"><span>仿古装饰器</span></a></h2><p>我们现在打算查看一个首次在js的高级js设计模式中出现的装饰器变种。</p><p>不像之前的许多案例， Diaz 和 Harmes更关心装饰器如何在其他编程语言中使用接口概念实现，我们之后会定义更多细节。</p><p>注意：这个特别的装饰器变体提供了引用目标。如果发现它过度的复杂，我推荐选择之前涉及到的更简单的实现。</p><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><p>高级js设计模式描述装饰器为一个模式，它被用来在相同接口的其他对象中透明的包裹对象。一个接口是定义一个对象应该有的方法的方式，但是它事实上不能直接指定，这些方法如何实现。</p><p>它们还可以指出方法需要传递的参数，但是这个可以看作可选的。</p><p>所以，为什么我们要在js中使用接口？想法是它们是自文档化以及促进可复用能力。理论上，接口也通过确保更改它们一定也让对象实现它们使得代码更稳定。</p><p>下面是一个使用鸭子类型的js的接口实现例子，一种有助于确定是否一个对象时基于它实现的方法的构造器的示例。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Create interfaces using a pre-defined Interface</span></span>
<span class="line"><span class="token comment">// constructor that accepts an interface name and</span></span>
<span class="line"><span class="token comment">// skeleton methods to expose.</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// In our reminder example summary() and placeOrder()</span></span>
<span class="line"><span class="token comment">// represent functionality the interface should</span></span>
<span class="line"><span class="token comment">// support</span></span>
<span class="line"><span class="token keyword">var</span> reminder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interface</span><span class="token punctuation">(</span> <span class="token string">&quot;List&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;summary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;placeOrder&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Remember to buy the milk&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">&quot;05/06/2016&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">summary</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;Remember to buy the milk, we are almost out!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">placeOrder</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;Ordering milk from your local grocery store&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Now create a constructor implementing the above properties</span></span>
<span class="line"><span class="token comment">// and methods</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Todo</span><span class="token punctuation">(</span> <span class="token parameter">config</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// State the methods we expect to be supported</span></span>
<span class="line">  <span class="token comment">// as well as the Interface instance being checked</span></span>
<span class="line">  <span class="token comment">// against</span></span>
<span class="line"> </span>
<span class="line">  Interface<span class="token punctuation">.</span><span class="token function">ensureImplements</span><span class="token punctuation">(</span> config<span class="token punctuation">.</span>actions<span class="token punctuation">,</span> reminder <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> config<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>methods <span class="token operator">=</span> config<span class="token punctuation">.</span>actions<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Create a new instance of our Todo constructor</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> todoItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span> properties <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Finally test to make sure these function correctly</span></span>
<span class="line"> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> todoItem<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">summary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> todoItem<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs:</span></span>
<span class="line"><span class="token comment">// Remember to buy the milk, we are almost out!</span></span>
<span class="line"><span class="token comment">// Ordering milk from your local grocery store</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面，Interface.ensureImplements为这两者提供严格的功能检查和代码而且Interface构造器能在这里找到。</p><p>使用接口的最大问题是，因为js中对它没有内置的支持，我们尝试模拟另一个语言的特性可能并不理想，这是一个危险。轻量接口能够被使用，而没有好的性能价值，而且我们将在下一节看看抽象装饰器，使用这个相同的概念。</p><h2 id="抽象装饰器" tabindex="-1"><a class="header-anchor" href="#抽象装饰器"><span>抽象装饰器</span></a></h2><p>为了演示装饰器这个版本的结构，我们猜想下我们有一个有一次建模的Macbook基类，并且允许我们使用许多额外的费用的增强来装饰我们的macbook的商店。</p><p>增强包括更新4GB或者8GB,雕刻，平行线或外壳，如果现在我们使用单独的子类给每个增强选项的组合建模，它可能看起来像这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Macbook</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span>  <span class="token function-variable function">MacbookWith4GBRam</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith8GBRam</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith4GBRamAndEngraving</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith8GBRamAndEngraving</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith8GBRamAndParallels</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith4GBRamAndParallels</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith8GBRamAndParallelsAndCase</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith4GBRamAndParallelsAndCase</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith8GBRamAndParallelsAndCaseAndInsurance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token function-variable function">MacbookWith4GBRamAndParallelsAndCaseAndInsurance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等等。</p><p>这可能是一个不切实际的解决方案，因为一个新子类可能需要给每个可获得的增强组合。因为我们喜欢让事情保持简单，而不是维护一个巨大的子类集合，让我们看看装饰器如何更好的解决这个问题。</p><p>而不是需要我们之前看到的所有组合，我们应该能够简单的创建5个装饰器类。在这些增强类上被调用的方法传递给我们的macbook类。</p><p>在我们下个例子中，装饰器透明的包裹它们的组件并且有趣的是，它们可以互换，因为它们使用相同的接口。</p><p>这里是我们打算给macbook定义的接口：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> Macbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interface</span><span class="token punctuation">(</span> <span class="token string">&quot;Macbook&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token string">&quot;addEngraving&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;addParallels&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;add4GBRam&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;add8GBRam&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;addCase&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// A Macbook Pro might thus be represented as follows:</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">MacbookPro</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// implements Macbook</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">MacbookPro</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">addEngraving</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">addParallels</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">add4GBRam</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">add8GBRam</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">addCase</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getPrice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Base price</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token number">900.00</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让我们之后能需要添加多少就添加多少装饰器，一个抽象装饰器类使用需要实现macbook接口的默认方法来定义，剩余的选项将被子类化。抽象装饰器确保我们能够再不同的祝贺中使用需要的装饰器来单独装饰基础类，而不需要衍生类给每个组合。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Macbook decorator abstract decorator class</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">MacbookDecorator</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">macbook</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    Interface<span class="token punctuation">.</span><span class="token function">ensureImplements</span><span class="token punctuation">(</span> macbook<span class="token punctuation">,</span> Macbook <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>macbook <span class="token operator">=</span> macbook<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">MacbookDecorator</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">addEngraving</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">addEngraving</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">addParallels</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">addParallels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">add4GBRam</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">add4GBRam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">add8GBRam</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">add8GBRam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">addCase</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getPrice</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发生在上面的案例中的是装饰器接收一个使用的对象作为我们基础组件。它使用的是我们之前定义的Macbook接口，对于每个方法都只是调用组件上的相同方法。我们现在可以创建可添加的选项类，只需要使用Macbook装饰器即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// First, define a way to extend an object a</span></span>
<span class="line"><span class="token comment">// with the properties in object b. We&#39;ll use</span></span>
<span class="line"><span class="token comment">// this shortly!</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span> <span class="token parameter">a<span class="token punctuation">,</span> b</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> key <span class="token keyword">in</span> b <span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span> b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line">            a<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">CaseDecorator</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">macbook</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>macbook <span class="token operator">=</span> macbook<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Let&#39;s now extend (decorate) the CaseDecorator</span></span>
<span class="line"><span class="token comment">// with a MacbookDecorator</span></span>
<span class="line"><span class="token function">extend</span><span class="token punctuation">(</span> CaseDecorator<span class="token punctuation">,</span> MacbookDecorator <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">CaseDecorator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addCase</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;Adding case to macbook&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">CaseDecorator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getPrice</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>macbook<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">45.00</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这里正在做的是重载addCase()和getPrice()方法，它们需要被装饰而且我们做到这个要首先调用原始的macbook上的方法，之后简单的添加字符串或者数值到它们中。</p><p>因为目前有相当多的信息呈现在这章，让我们尝试把它们放到一起，在一个单独的例子中，希望高亮我们已经学到的。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Instantiation of the macbook</span></span>
<span class="line"><span class="token keyword">var</span> myMacbookPro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MacbookPro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: 900.00</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myMacbookPro<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Decorate the macbook</span></span>
<span class="line"><span class="token keyword">var</span> decoratedMacbookPro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaseDecorator</span><span class="token punctuation">(</span> myMacbookPro <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// This will return 945.00</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> decoratedMacbookPro<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为装饰器能够动态的修改对象，所以它是一个用来修改现有对象的完美模式，它相比给每个对象类型维护单独子类，创建装饰器围绕对象更简单。这让维护需要大量子类对象应用更加直接。</p><p>这个案例的函数版本能在jsbin找到。</p><h2 id="装饰器和jquery" tabindex="-1"><a class="header-anchor" href="#装饰器和jquery"><span>装饰器和jquery</span></a></h2><p>正如我们提到的其他模式，还有使用jq实现的装饰器模式例子。jquery.extend()允许我们在运行时给单个对象扩展两个或者更多对象（和它们的属性）。</p><p>在这个设想中，一个目标对象能够使用新功能来装饰，而不会破坏或者推翻现有的源对象中的方法。（虽然这个能做到）。</p><p>在下面的例子中，我们定义三个对象，默认，可选，配置。任务的目的时是使用optionsettings中的额外功能装饰defaults对象。我们必须：</p><p>留下未被修改的状态的defaults，在这里我们不会失去访问属性或函数的能力，在后面的点b获得使用选项中找到的装饰属性和函数的能力。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> decoratorApp <span class="token operator">=</span> decoratorApp <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// define the objects we&#39;re going to use</span></span>
<span class="line">decoratorApp <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token literal-property property">defaults</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">validate</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">welcome</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;welcome!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">validate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">helloWorld</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;hello world&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token literal-property property">settings</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">printObj</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">obj</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            next<span class="token punctuation">;</span></span>
<span class="line">        $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">key<span class="token punctuation">,</span> val</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            next <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">;</span></span>
<span class="line">            next <span class="token operator">+=</span> $<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">printObj</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span></span>
<span class="line">            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> next <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;{ &quot;</span> <span class="token operator">+</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; }&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// merge defaults and options, without modifying defaults explicitly</span></span>
<span class="line">decoratorApp<span class="token punctuation">.</span>settings <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> decoratorApp<span class="token punctuation">.</span>defaults<span class="token punctuation">,</span> decoratorApp<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// what we have done here is decorated defaults in a way that provides</span></span>
<span class="line"><span class="token comment">// access to the properties and functionality it has to offer (as well as</span></span>
<span class="line"><span class="token comment">// that of the decorator &quot;options&quot;). defaults itself is left unchanged</span></span>
<span class="line"> </span>
<span class="line"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#log&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> decoratorApp<span class="token punctuation">.</span><span class="token function">printObj</span><span class="token punctuation">(</span>decoratorApp<span class="token punctuation">.</span>settings<span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token operator">+</span> decoratorApp<span class="token punctuation">.</span><span class="token function">printObj</span><span class="token punctuation">(</span>decoratorApp<span class="token punctuation">.</span>options<span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token operator">+</span> decoratorApp<span class="token punctuation">.</span><span class="token function">printObj</span><span class="token punctuation">(</span>decoratorApp<span class="token punctuation">.</span>defaults<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// settings -- { validate: true, limit: 5, name: bar, welcome: function (){ console.log( &quot;welcome!&quot; ); },</span></span>
<span class="line"><span class="token comment">// helloWorld: function (){ console.log( &quot;hello world&quot; ); } }</span></span>
<span class="line"><span class="token comment">// options -- { validate: true, name: bar, helloWorld: function (){ console.log( &quot;hello world&quot; ); } }</span></span>
<span class="line"><span class="token comment">// defaults -- { validate: false, limit: 5, name: foo, welcome: function (){ console.log(&quot;welcome!&quot;); } }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优势和劣势" tabindex="-1"><a class="header-anchor" href="#优势和劣势"><span>优势和劣势</span></a></h2><p>开发者喜欢使用这个模式，因为它可以透明的使用，而且还非常灵活。像我们之前看到的，对象能够被包裹或者使用新的行为来装饰，然后继续使用不需要担心基础对象被修改。在更广泛的背景下，这个模式还避免我们需要依赖大量子类来获得同样的收益。</p><p>但是，在实现模式的时候，我们应该知道它的缺点。如果管理不好，它能够明显的增加我们应用程序架构的复杂度，因为它在我们的名称空间中引入了许多相似的小型对象。这里的关注除了变得难以管理之外，其他的不熟悉这个模式的开发者可能很难理解，它为什么可以使用。</p><p>充分的评论或模式研究应该有助于后者，但是只要在我们应用程序中使用装饰器的广泛程序，这两方面我们都应该没问题。</p>`,54)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":15,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":7,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"4c6d361b68cc347bcc1418459c6e39ee7900d7f5","time":1608894275000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"vue"},{"hash":"be55a361c876b3c818e0f6b491ce01e578c85a7d","time":1608638065000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"js:decorator"},{"hash":"36e850d325c694584739c653775d8a91f433573e","time":1608602706000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"js:design pattern"},{"hash":"2421622565f30ccb376a54246e95a475fddb3c2b","time":1606390990000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"2588ecbf370e3d7565203fdf3c6bc1dd9b7b343f","time":1598440472000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"算法+英语："},{"hash":"f84f48ca2b46b48d67e6442134732dd42c11a116","time":1597766382000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"jacascript"},{"hash":"b5bfb66219bb9504b28f6e7874430cdf50311d19","time":1597590917000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"19e9eb18c66100cfc59e853a51f91f7efd0f5f12","time":1596989722000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/11装饰者模式.md"}');export{i as comp,u as data};
