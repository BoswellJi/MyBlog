import{_ as l,c as a,b as i,o as s}from"./app-B56A7WC8.js";const n={};function c(o,e){return s(),a("div",null,e[0]||(e[0]=[i(`<h2 id="webgl图形流水线" tabindex="-1"><a class="header-anchor" href="#webgl图形流水线"><span>webgl图形流水线</span></a></h2><ul><li><p>支持webgl的浏览器 ：js调用webgl api，并把有关3D模型的 <code>绘制信息</code> 传递给webgl流水线；</p></li><li><p>webgl应用程序包含 ： <code>可编程着色器的源代码Shader</code> 和 <code>3D/2D对象的绘制数据</code> ；</p></li><li><p>图形数据通过整个webgl流水线后，gpu把结果写入 <code>webgl绘制缓存</code> 的内存中 <code>可以看成webgl的帧缓存</code> ；</p><ul><li>绘制缓存和帧缓存一样，也有一个颜色缓存，一个z-缓存，一个模板缓存;</li><li>但是 <code>绘制缓存/webgl帧缓存</code> 中的内容被传送到 <code>物理帧缓存</code> 之前，需要与html中其他内容进行组合;</li><li><code>物理帧缓存</code> ：实际结果直接展示在屏幕上；</li></ul></li><li><p>渲染管线流程图/WebGL流水线：<code>webgl程序来说，顶点、片段着色器最重要</code></p></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">  下面开始：逐顶点操作</span>
<span class="line"></span>
<span class="line">  顶点着色器 ----&gt;  图元装配  ----&gt;  光栅器  -----&gt;  片元着色器</span>
<span class="line"></span>
<span class="line">  下面开始：逐片段操作</span>
<span class="line"></span>
<span class="line">  ------&gt; 剪裁测试 ------&gt; 多重采样，片段运算 ------&gt; 模板测试 </span>
<span class="line">  </span>
<span class="line">  ------&gt;  深度缓存测试 ------&gt;  融合 ------&gt;  抖动 ------&gt; 绘制缓存（帧缓存）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="顶点着色器" tabindex="-1"><a class="header-anchor" href="#顶点着色器"><span>顶点着色器</span></a></h2><ul><li>要想得到真实3D场景，仅仅绘制某些位置的对象是不够的，还要考虑到灯光照射到这些对象时的效果；</li><li>确定灯光对不同材质效果的整个过程，叫做 <code>着色</code> ;</li><li>webgl中着色分为两个阶段 <ul><li>顶点</li><li>片段</li></ul></li><li><code>顶点着色器</code> 是流水线中对顶点进行着色的阶段；</li><li><code>顶点着色器</code> 是3D建模数据（顶点，经过js api后，首先到达的地方；</li><li>顶点着色器的输入包括： <ul><li>顶点着色器的实际源代码；</li><li>attribute 变量（属性变量 <code>vertexAttribPointer()</code> : 在顶点attributes数组中，指定数据格式，和位置，每个顶点的信息； <code>说明是用户自定义变量,可以从外部传递数据进来</code> ；</li><li>uniform 变量 <code>恒值变量，变换矩阵，光源位置都属于uniform变量</code> , 表示所有顶点都相同的数据； <code>说明是用户自定义变量,可以从外部传递数据进来</code> ；</li><li>varying 变量 <code>易变变量</code> ，顶点着色器向片元着色器发送信息的一个手段；</li><li>内置特殊变量： <ul><li>gl_Position</li><li>gl_FrontFacing</li><li>gl_PointSize</li></ul></li></ul></li></ul><h2 id="图元装配" tabindex="-1"><a class="header-anchor" href="#图元装配"><span>图元装配</span></a></h2><ul><li>webgl流水线需要把已经着色的顶点装配成三角形，线段，点精灵等几何图形；</li><li>webgl会判断他们当前时刻是否位于屏幕上可见的3D区域中；</li><li>大多数情形下，我们把这个3D可见区域称为视锥体；（底部为矩形，截去顶部的金字塔</li><li>会删除完全处于此视锥之外的图元</li></ul><h2 id="光栅化" tabindex="-1"><a class="header-anchor" href="#光栅化"><span>光栅化</span></a></h2><ul><li>把图元 <code>（线段，三角形，点</code> 转换为片段;</li></ul><h2 id="片段着色器" tabindex="-1"><a class="header-anchor" href="#片段着色器"><span>片段着色器</span></a></h2><ul><li><p>光栅化的片段需要发送到流水线的第二可编程阶段；</p></li><li><p>一个片段实际上对应于屏幕上的一个像素；（不是所有片段都会称为绘制缓存中的像素；</p></li><li><p>最终能够被写入到绘制缓存中的片段，才称为像素；</p></li><li><p>内置特殊变量：</p><ul><li>gl_FragCoord</li><li>gl_FrontFacing</li><li>gl_PointCoord</li><li>gl_FragColor</li></ul></li><li><p>Uniforms 和 Samplers（拾色器</p></li><li><p>Varying</p></li></ul><h2 id="逐片段操作" tabindex="-1"><a class="header-anchor" href="#逐片段操作"><span>逐片段操作</span></a></h2><ul><li>把每个片段传送到流水线的下一个阶段，包含逐片段操作；</li><li>来自片段着色器的每个片段都可以以不同方式影响绘制缓存中的一个像素；</li></ul><h2 id="裁剪测试" tabindex="-1"><a class="header-anchor" href="#裁剪测试"><span>裁剪测试</span></a></h2><ul><li>决定片段是否位于裁剪矩形中；</li></ul><h2 id="多重采样片段操作" tabindex="-1"><a class="header-anchor" href="#多重采样片段操作"><span>多重采样片段操作</span></a></h2><ul><li>修改片段的alpha值和覆盖值coverage, 作为抗锯齿的一个措施；</li><li>抗锯齿技术： 用来改善多边形的外观使得它们看起来没有锯齿，即在屏幕得到光滑的结果；</li></ul><h2 id="深度缓存测试" tabindex="-1"><a class="header-anchor" href="#深度缓存测试"><span>深度缓存测试</span></a></h2><ul><li>根据深度缓存的值，丢弃输入的部分片段；</li><li>颜色缓存值存储场景中某个时刻读观察者可见对象的颜色；</li><li>有些对象可能会被其他对象遮挡，深度缓存和深度缓存测试决定哪些像素出现再颜色缓存中；</li><li>每个像素，深度缓存都要保存观察者到当前最近图元的距离；</li><li>测试是指：传入片段得z值比较小，距离观察者较近，就展示，较大，就较远会被遮挡，就丢弃；</li></ul><h2 id="融合" tabindex="-1"><a class="header-anchor" href="#融合"><span>融合</span></a></h2><ul><li>片段颜色和已经再颜色缓存中相应位置的片段的颜色进行组合；</li><li>当我们要创建透明对象时，就需要使用融合技术；</li></ul><h2 id="抖动" tabindex="-1"><a class="header-anchor" href="#抖动"><span>抖动</span></a></h2><ul><li>以某种方式排列颜色，得到比实际颜色数更多的颜色；</li></ul>`,23)]))}const m=l(n,[["render",c]]),h=JSON.parse('{"path":"/books/%E5%9B%BE%E5%BD%A2%E5%AD%A6/webgl/webgl%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/1webgl%E7%AE%80%E4%BB%8B/1.5webgl%E5%9B%BE%E5%BD%A2%E6%B5%81%E6%B0%B4%E7%BA%BF.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":7,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"bb35a4c4ad968e30f7905043e2a76c25b32bea5a","time":1600774957000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"webgl:图形系统"},{"hash":"61b2bb735d369e9817950524f184d47d78c5bf9c","time":1599475546000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"webgl："},{"hash":"547245a12221c84692bb4f8c93fe9b6ee86101bc","time":1598808978000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"WebGL"},{"hash":"258b763bffec1ffe11b7106ceb40a47801c1cae5","time":1598808978000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"WebGL"},{"hash":"13c8ee4eac7a390e4a7bb4942d5389419e901949","time":1596247000000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"英语：语法"},{"hash":"5434d252a751f7f38d2408e13c82309d8ff602cf","time":1594900100000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"webgl"}]},"filePathRelative":"books/图形学/webgl/webgl高级编程/1webgl简介/1.5webgl图形流水线.md"}');export{m as comp,h as data};
