import{_ as e,c as m,b as s,o as i}from"./app-B56A7WC8.js";const o={};function c(n,a){return i(),m("div",null,a[0]||(a[0]=[s('<h2 id="解耦应用程序的重要性" tabindex="-1"><a class="header-anchor" href="#解耦应用程序的重要性"><span>解耦应用程序的重要性</span></a></h2><p>在可伸缩的js的世界，当我们说一个应用程序是模块化的，通常我们的意思是它是由高解耦的模块集合组成，功能的不同部分存储在模块中。松耦合通过删除其中可能的依赖使得的应用程序更容易维护。当这个被高效实现时，理解如何改变一个可能影响另一个的系统部分会非常容易。</p><p>但是不像一些传统的变成语言，当前js没有为开发者提供一种干净，有组织的方式导入此类代码模块的方法。这是规范的问题之一，知道最近几年，对更有组织的js应用程序的需求变得更明显，规范才需要深入思考。</p><p>相反地，现在开发者留下模块模式或者对象字面量模式的变种来回退，我们在这本书的更早其谈到这个。其中的许多模块脚本在dom中被串在一起，名称空间由单个全局对象描述，在我们的体系结构中，荣然可能会发生命名冲突。没有手动工作或第三方工具，也没有干净的方法来处理依赖关系。</p><p>虽然这些问题的原生解决方案会在es harmony中来到（可能称为js的下个版本），好消息是，早先从来没有编写模块化js，但是今天，我们可以开始使用它了。</p><p>在这章中，我们打算看看编写模块化js的三种格式，AMD,CommonJS,和js的下个版本的提案Harmony。</p><h2 id="关于脚本加载器的说明" tabindex="-1"><a class="header-anchor" href="#关于脚本加载器的说明"><span>关于脚本加载器的说明</span></a></h2><p>在讨论amd和commonjs的模块的时候，很难不去讨论房间里的大象-脚本加载器。在编写这本书的时候，脚本加载是实现目标的一种手段，目标是称为当今能够在应用程序中使用的模块化js。为此，不幸的是必须使用兼容的脚本加载器。这样才能从这章中获得最大的收获。我推荐对流行的脚本加载器如何工作先有个基本理解，这样模块格式的解释在上下文中才是有意义的。</p>',8)]))}const h=e(o,[["render",c]]),l=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10%E7%8E%B0%E4%BB%A3%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1amd.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":3,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"06e093fd38e8f430cf8fb8376fe7e834bc48c0d2","time":1605182509000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"English:关系词"},{"hash":"a71a5038d869492c61cddd66590524253e88cfcb","time":1605182509000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"English:关系词"}]},"filePathRelative":"books/javascript/javascript设计模式/10现代模块化的js设计模式/1amd.md"}');export{h as comp,l as data};
