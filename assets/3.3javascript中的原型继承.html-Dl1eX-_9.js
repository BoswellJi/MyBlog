import{_ as e,c as i,b as l,o as c}from"./app-B56A7WC8.js";const o={};function m(s,a){return c(),i("div",null,a[0]||(a[0]=[l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li><p>完全实现 <code>封装</code> , <code>继承</code> , <code>多态</code> ，称为面向对象语言，满足其中部分特性的语言称为 <code>基于对象语言</code> ；</p></li><li><p>对象系统的继承特性：</p><ul><li>基于类</li><li>基于原型</li><li>基于元类</li></ul></li><li><p>js中，没有使用类，而是使用 <code>构造器</code> 机制来实现 <code>类</code> 的某些功能；</p></li><li><p><code>构造器</code>或<code>由构造机制</code>带来的特性；</p></li></ul><h2 id="空对象null-空的对象" tabindex="-1"><a class="header-anchor" href="#空对象null-空的对象"><span>空对象null, 空的对象{}</span></a></h2><ul><li><code>null</code>因为是对象类型可以用<code>for ... in</code>进行遍历，只不过为空而已；</li><li><code>null</code>不是Object实例，所以instanceof会返回false;</li><li><code>{}</code>空对象，也成为裸对象，空白对象，就是一个标准的，通过Object()构造的对象实例；</li></ul><h2 id="原型继承的基本性质" tabindex="-1"><a class="header-anchor" href="#原型继承的基本性质"><span>原型继承的基本性质</span></a></h2><ul><li>对象只有构造自某个原型的问题；</li><li>动态绑定与静态绑定；</li><li>原型也是对象的实例，是一个最关键的性质；</li><li><code>构造器实例</code> ，都是 <code>复制</code> 自构造器的 <code>原型对象</code> ；</li></ul><h2 id="空的对象是所有对象的基础" tabindex="-1"><a class="header-anchor" href="#空的对象是所有对象的基础"><span>空的对象是所有对象的基础</span></a></h2><ul><li>对象的构建过程，可以被简单的映射为<code>复制</code>；（类比</li></ul><h2 id="构造复制-写时复制-读遍历" tabindex="-1"><a class="header-anchor" href="#构造复制-写时复制-读遍历"><span>构造复制？写时复制？读遍历？</span></a></h2><ul><li>构造复制：导致每个实例都占用相同的内存，导致内存占用急速增加；</li><li>写时复制：指明 <code>实例</code> 等于 <code>原型实例</code> ，在读取时候，顺着指示去读取复制原型；</li><li>js使用的是读遍历；</li></ul><h2 id="构造过程-从函数到构造器" tabindex="-1"><a class="header-anchor" href="#构造过程-从函数到构造器"><span>构造过程： 从函数到构造器</span></a></h2><ul><li><p>对像的构造过程；（函数作为构造器做了什么？</p><ul><li>不会在声明一个函数时，创建一个对象，并使prototype指向它；</li><li>prototype在函数初始化时，无值，可以看作为null；</li><li>只有在使用prototype时，才创建 <code>原型对象实例</code> ； <ul><li>原型对象总是Object构造器的实例；</li></ul></li><li>使用<code>new</code>运算符创建构造器实例时，引擎会再造一个原型对象实例；</li></ul></li><li><p>函数与构造器的区别？</p><ul><li>prototype是否是一个有意义的值；</li></ul></li></ul><h2 id="预定义属性和方法" tabindex="-1"><a class="header-anchor" href="#预定义属性和方法"><span>预定义属性和方法</span></a></h2><ul><li>对象实例： ^proto = Object.prototype ^props = properties table</li></ul><h2 id="原型链的维护" tabindex="-1"><a class="header-anchor" href="#原型链的维护"><span>原型链的维护</span></a></h2><ul><li><p>两个原型链</p><ul><li>构造器有一个prototype的成员，实例有一个指向原型的属性，称为 <code>内部原型链</code> ；</li><li>以便和构造器的prototype组成 <code>构造器原型链</code> ；</li></ul></li><li><p>constructor属性的维护</p><ul><li>由于原型继承时，会修改当前构造器prototype的constructor属性，所以，导致实例的constructor属性错误；</li></ul></li><li><p>内部原型链的作用</p><ul><li>用户修改constructor，不用担心，实例与父类的一致性；</li></ul></li></ul><h2 id="原型继承的实质" tabindex="-1"><a class="header-anchor" href="#原型继承的实质"><span>原型继承的实质</span></a></h2><ul><li><p>原型修改</p><ul><li>子类在获取成员列表时，必将回溯到改类；</li></ul></li><li><p>原型继承</p></li><li><p>从无到有</p></li><li><p>如何理解 <code>继承来的成员</code></p></li></ul>',18)]))}const d=e(o,[["render",m]]),t=JSON.parse('{"path":"/books/javascript/javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5/3.javascript%E7%9A%84%E9%9D%9E%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/3.3javascript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":13,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"ba58bc55ae23497b0b222467314c09eb9f4fd81c","time":1598270631000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"English"},{"hash":"e321fddedbf3108742b9906cd6e52d4d342863d3","time":1598270631000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"English"},{"hash":"2902950a49ff1a6f0306dedf06809551a0691f21","time":1597754939000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"javascript"},{"hash":"e7bca14f7896e4704bed67a1b4199f3a06f5996c","time":1596885946000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript语言精髓与编程语言实践/3.javascript的非函数式语言特性/3.3javascript中的原型继承.md"}');export{d as comp,t as data};
