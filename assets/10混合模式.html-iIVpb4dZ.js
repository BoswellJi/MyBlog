import{_ as s,c as a,b as p,o as e}from"./app-B56A7WC8.js";const t={};function c(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>在传统的编程语言中，比如C++和Lisp，混合是类提供的功能，它容易由一个子类或者用于函数复用的目的子类组来继承。</p><h2 id="子类" tabindex="-1"><a class="header-anchor" href="#子类"><span>子类</span></a></h2><p>对于不熟悉子类的开发者来说，进一步深入混合和装饰器之前，我们会对它们进行一个简单的简介。</p><p>子类是一个术语，它涉及到从一个基础或者超类对象中继承属性给新对象。在传统的面向对象编程中，类B可能继承另一个类A。这里我们认为超类A和A的子类B。例如，B的所有实例都从A中继承方法。但是B仍然能够定义自己的方法，包括覆盖那些A定义的原始方法。</p><p>B应该需要调用A中已经被覆盖的方法，我们称这个为方法链。 B应该需要调用构造函数A(超类)，我们调用构造函数链。</p><p>为了演示子类，首先我们需要一个能够有自己创建的新实例的基础对象。让我们围绕人这个概念来模拟：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步，我们会指定一个新类（对象），它是现存Person对象的子类。让我们想想一下，我们想要添加distinct属性来区分人与超级英雄，尽管继承超类Person的属性。因为超级英雄共享了一些普通人的共同特质（例如，名字，性别），这应该有希望说明子类如何适当地工作。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// a new instance of Person can then easily be created as follows:</span></span>
<span class="line"><span class="token keyword">var</span> clark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token string">&quot;Clark&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kent&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Define a subclass constructor for for &quot;Superhero&quot;:</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Superhero</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> powers</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Invoke the superclass constructor on the new object</span></span>
<span class="line">    <span class="token comment">// then use .call() to invoke the constructor as a method of</span></span>
<span class="line">    <span class="token comment">// the object to be initialized.</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Finally, store their powers, a new array of traits not found in a normal &quot;Person&quot;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>powers <span class="token operator">=</span> powers<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">Superhero</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> superman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Superhero</span><span class="token punctuation">(</span> <span class="token string">&quot;Clark&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kent&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;flight&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;heat-vision&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> superman <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs Person attributes as well as powers</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Superhero构造函数创建了一个由Person传下来的对象。这个类型的对象具有链中高于它的对像的属性，而且如果我们在Person对象中设置默认值，Superhero能够覆盖任何继承的值，以及特定于其对象的值。</p><h2 id="混合-mixins" tabindex="-1"><a class="header-anchor" href="#混合-mixins"><span>混合（mixins）</span></a></h2><p>js中，我们可以看到来自混合的继承作为通过扩展集合功能的手段。我们定义的每一个新对象都有一个原型，它可以从改原型继承进一步的属性。原型能够从其他对象原型来继承，但是，更重要的是，能给任何数量的对象实例定义属性。我们能利用这个事实来提升函数的复用。</p><p>混合允许对象从少量的复杂度的对象借用（继承）功能。因为这个模式在js对象原型中非常有效，它给我们一种相当灵活的方式从不止一个混合中共享功能，但实际上很多是通过多继承实现的。</p><p>它们可以被当作有属性和方法的对象来查看，它可以很容易的跨许多其他对象原型共享。想象我们定义了一个包含标准对象字面量中的使用共享，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> myMixins <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">moveUp</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;move up&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">moveDown</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;move down&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">stop</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;stop! in the name of love!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后我们可以容易扩展现存的构造函数的原型来包含使用助手的行为，比如underscore.js的_.extend方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// A skeleton carAnimator constructor</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CarAnimator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">moveLeft</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;move left&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// A skeleton personAnimator constructor</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">PersonAnimator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">moveRandomly</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">/*..*/</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Extend both constructors with our Mixin</span></span>
<span class="line">_<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span> <span class="token class-name">CarAnimator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> myMixins <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">_<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span> <span class="token class-name">PersonAnimator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> myMixins <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Create a new instance of carAnimator</span></span>
<span class="line"><span class="token keyword">var</span> myAnimator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarAnimator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myAnimator<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myAnimator<span class="token punctuation">.</span><span class="token function">moveDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myAnimator<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs:</span></span>
<span class="line"><span class="token comment">// move left</span></span>
<span class="line"><span class="token comment">// move down</span></span>
<span class="line"><span class="token comment">// stop! in the name of love!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像我们看到的，这个允许我们非常非常容易在公共行为中混合对象构造器。</p><p>在下个案例中，我们有两个构造器：Car和Mixin。我们打算增加Car，以至于它能够继承定义在Mixin中的特定方法，也就是driveForward() and driveBackward()。这次我们不使用underscore.js。</p><p>相反地，这个案例将演示如何增强工造函数以包含功能，而不需要为每个构造函数复制此过程。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Define a simple Car constructor</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Car</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">settings</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> settings<span class="token punctuation">.</span>model <span class="token operator">||</span> <span class="token string">&quot;no model provided&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> settings<span class="token punctuation">.</span>color <span class="token operator">||</span> <span class="token string">&quot;no colour provided&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Mixin</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Mixin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">Mixin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">driveForward</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;drive forward&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">driveBackward</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;drive backward&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">driveSideways</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;drive sideways&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Extend an existing object with a method from another</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">augment</span><span class="token punctuation">(</span> <span class="token parameter">receivingClass<span class="token punctuation">,</span> givingClass</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// only provide certain methods</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> givingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// provide all methods</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> methodName <span class="token keyword">in</span> givingClass<span class="token punctuation">.</span>prototype <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">// check to make sure the receiving class doesn&#39;t</span></span>
<span class="line">            <span class="token comment">// have a method of the same name as the one currently</span></span>
<span class="line">            <span class="token comment">// being processed</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> givingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">// Alternatively (check prototype chain as well):</span></span>
<span class="line">            <span class="token comment">// if ( !receivingClass.prototype[methodName] ) {</span></span>
<span class="line">            <span class="token comment">// receivingClass.prototype[methodName] = givingClass.prototype[methodName];</span></span>
<span class="line">            <span class="token comment">// }</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Augment the Car constructor to include &quot;driveForward&quot; and &quot;driveBackward&quot;</span></span>
<span class="line"><span class="token function">augment</span><span class="token punctuation">(</span> Car<span class="token punctuation">,</span> Mixin<span class="token punctuation">,</span> <span class="token string">&quot;driveForward&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;driveBackward&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Create a new Car</span></span>
<span class="line"><span class="token keyword">var</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;blue&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Test to make sure we now have access to the methods</span></span>
<span class="line">myCar<span class="token punctuation">.</span><span class="token function">driveForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myCar<span class="token punctuation">.</span><span class="token function">driveBackward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs:</span></span>
<span class="line"><span class="token comment">// drive forward</span></span>
<span class="line"><span class="token comment">// drive backward</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// We can also augment Car to include all functions from our mixin</span></span>
<span class="line"><span class="token comment">// by not explicitly listing a selection of them</span></span>
<span class="line"><span class="token function">augment</span><span class="token punctuation">(</span> Car<span class="token punctuation">,</span> Mixin <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> mySportsCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token string">&quot;Porsche&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">mySportsCar<span class="token punctuation">.</span><span class="token function">driveSideways</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs:</span></span>
<span class="line"><span class="token comment">// drive sideways</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点和缺点</p><p>混合坚持减少重复性的功能以及增加函数服用在系统中。其中一个应用程序可能需要共享跨对象实例的行为，我们很容易在混合中由操作共享功能来避免重复并且，因此聚焦在我们系统中真正不同的功能的实现。</p><p>也就是说，混合的缺点稍微多些争议。一些开发者感觉注入功能到对象原型是不好的想法，因为它会导致原型污染以及不确定的层级，就我们函数的起源来看。在大型系统中，这个可能是很好的案例。</p><p>我提出强大的文档能帮助尽量减少关于函数中混合的来源的混乱。但是就像每个模式一样，如果在执行过程中注意了，我们应该没问题。</p>`,25)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":1,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/10混合模式.md"}');export{i as comp,u as data};
