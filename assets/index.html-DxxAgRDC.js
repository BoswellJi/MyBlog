import{_ as i,c as e,b as n,o as l}from"./app-B56A7WC8.js";const s="/MyBlog/assets/image-4-C1UgccRf.png",t="/MyBlog/assets/image-3-Dizny6PE.png",h="/MyBlog/assets/image-5-DjBIdPX5.png",p={};function c(r,a){return l(),e("div",null,a[0]||(a[0]=[n('<h1 id="旅仓-pc-路由改造方案" tabindex="-1"><a class="header-anchor" href="#旅仓-pc-路由改造方案"><span>旅仓 PC 路由改造方案</span></a></h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>旅仓PC前端是多页的架构，部署方式选择了 Ngnix 托管静态资源的方式部署，<span style="color:red;">所以前端是没有路由的，只能通过 Ngnix 的配置来做路由的跳转</span>。但是每次新增一个页面都需要在 Ngnix 上配置路由。有以下问题：</p><ol><li>导致操作繁琐，不利于维护。</li><li>且容易忘记配置，导致页面无法访问。</li><li>甚至可能会因为配置错误，导致服务器部署失败。</li></ol><p>所以需要对路由进行改造，改造成前端路由的方式，在前端配置路由即可，避免每次都要改服务器。</p><h2 id="收益" tabindex="-1"><a class="header-anchor" href="#收益"><span>收益</span></a></h2><ul><li>前端路由，避免每次新增页面都要改服务器，减少失误。</li><li>保持现有的多页架构不变，继续支持多页架构，减少工作量。</li><li>保持现有的 Ngnix 部署方式不变，继续支持 Ngnix 部署方式，不引入新技术债务。</li><li>保持当前的开发体验不变，且新的方案与当前工作流一致。开发环境一致，部署方式一致，没有侵入性。</li></ul><h2 id="方案" tabindex="-1"><a class="header-anchor" href="#方案"><span>方案</span></a></h2><p>通过微前端的思路来实现前端路由，</p><p>主应用负责:</p><ol><li>路由的监听与解析</li><li>对应路由页面的入口<strong>html</strong>加载</li><li>解析html中的js</li><li>执行js，激活页面</li></ol><p>子应用负责:</p><ol><li>具体页面的实现</li></ol><h2 id="微前端应用架构图" tabindex="-1"><a class="header-anchor" href="#微前端应用架构图"><span>微前端应用架构图</span></a></h2><p><img src="https://pic1.zhimg.com/v2-49e29d35de9548c02b0d48782714e914_r.jpg" alt=""></p><h3 id="旅仓之前的架构" tabindex="-1"><a class="header-anchor" href="#旅仓之前的架构"><span>旅仓之前的架构</span></a></h3><p><img src="'+s+'" alt="alt text"></p><h3 id="旅仓现在的架构" tabindex="-1"><a class="header-anchor" href="#旅仓现在的架构"><span>旅仓现在的架构</span></a></h3><p><img src="'+t+'" alt="alt text"></p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><h3 id="逻辑流程图" tabindex="-1"><a class="header-anchor" href="#逻辑流程图"><span>逻辑流程图</span></a></h3><p><img src="'+h+'" alt="alt text"></p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h2><ol><li>确保js顺序执行，避免依赖混乱。</li><li>开发注意事项，因为通过主页面加载子页面，所以子页面不存在window相关事件，比如onload，DOMContentLoaded，onpageshow, onpagehide等,统统可以通过组件钩子函数来实现。</li><li>nginx服务器配置需要支持根路由都指向主页面，且保证html文件不缓存。</li><li>测试每个页面，确保没有不兼容的地方</li></ol><h2 id="计划" tabindex="-1"><a class="header-anchor" href="#计划"><span>计划</span></a></h2><ul><li>9.1-9.5 方案评审，确定方案可行性。</li><li>9.8-9.12 方案开发，完成路由化的功能开发。</li><li>9.15-9.19 方案测试与上线。</li></ul>',26)]))}const d=i(p,[["render",c]]),g=JSON.parse('{"path":"/ppt/%E6%97%85%E4%BB%93PC%E8%B7%AF%E7%94%B1%E6%94%B9%E9%80%A0/","title":"旅仓 PC 路由改造方案","lang":"en-US","frontmatter":{},"git":{"updatedTime":1757924745000,"contributors":[{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"085eceee3dc203f1021059af916395f83d48e480","time":1757924745000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: nuxt 介绍文档"},{"hash":"2c6cf84d74c706e5c1bcfc6c6cad128d17f43fe7","time":1757662997000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: Flutter ui 分享"}]},"filePathRelative":"ppt/旅仓PC路由改造/index.md"}');export{d as comp,g as data};
