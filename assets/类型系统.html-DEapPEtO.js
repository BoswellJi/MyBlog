import{_ as n,c as a,b as e,o as l}from"./app-B56A7WC8.js";const p={};function t(i,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="类型操作" tabindex="-1"><a class="header-anchor" href="#类型操作"><span>类型操作</span></a></h2><ul><li><code>Generics</code>范型：传递参数的类型</li><li><code>Keyof</code>类型操作符：使用 keyof 操作符来创建新类型</li><li><code>Typeof</code>类型操作符：使用 typeof 操作符来创建新类型</li><li><code>Indexed Access Types</code>索引访问类型：使用<code>Type[&#39;a&#39;]</code>语法来访问类型的子类型</li><li><code>Conditional Types</code>条件类型：在类型系统中行为向 if 语句<code>x extends y?true:false</code></li><li><code>Mapped Types</code>映射类型：通过在现存类型中映射每个属性来创建类型</li><li><code>Template Literal Types</code>模板字面量类型：通过模板字面量字符串改变属性的映射类型</li></ul><h2 id="工具类型" tabindex="-1"><a class="header-anchor" href="#工具类型"><span>工具类型</span></a></h2><ul><li><code>Partial&lt;T&gt;</code></li><li><code>Required&lt;T&gt;</code></li><li><code>Readonly&lt;T&gt;</code></li><li><code>Record&lt;K,T&gt;</code></li><li><code>Pick&lt;T&gt; </code></li><li><code>Omit&lt;T&gt; </code></li><li><code>Exclude&lt;T&gt;</code></li><li><code>Extract&lt;T&gt;</code></li><li><code>NonNullable&lt;T&gt;</code></li><li><code>Parameters&lt;T&gt; </code></li><li><code>ConstructorParameters&lt;T&gt;</code></li><li><code>RetureType&lt;T&gt; </code></li><li><code>InstanceType&lt;T&gt; </code></li><li><code>ThisParameters&lt;T&gt; </code></li><li><code>OmitThisParameters&lt;T&gt; </code></li><li><code>ThisType&lt;T&gt; </code></li></ul><p><strong>字符串的基本操作</strong></p><ul><li><code>Uppercase&lt;StringT&gt;</code></li><li><code>Lowercase&lt;StringT&gt;</code></li><li><code>Capitalize&lt;StringT&gt;</code></li><li><code>Uncapitalize&lt;String&gt;</code></li></ul><ol start="0"><li><p>类型是所有满足某些特征的 JS 值的集合</p></li><li><p>静态索引签名：</p></li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> hello <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span></span>
<span class="line">  <span class="token keyword">static</span> world <span class="token operator">=</span> <span class="token number">1234</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Valid.</span></span>
<span class="line">Foo<span class="token punctuation">[</span><span class="token string">&#39;whatever&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Has type &#39;string | number | undefined&#39;</span></span>
<span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> Foo<span class="token punctuation">[</span><span class="token string">&#39;something&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>实例索引签名：</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">  hello <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span></span>
<span class="line">  world <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// This is an index signature:</span></span>
<span class="line">  <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Valid assigment</span></span>
<span class="line">instance<span class="token punctuation">[</span><span class="token string">&#39;whatever&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Has type &#39;string | number | undefined&#39;.</span></span>
<span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> instance<span class="token punctuation">[</span><span class="token string">&#39;something&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>检查Promise真值：</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//  ~~~~~</span></span>
<span class="line">    <span class="token comment">// Error!</span></span>
<span class="line">    <span class="token comment">// This condition will always return true since</span></span>
<span class="line">    <span class="token comment">// this &#39;Promise&lt;boolean&gt;&#39; appears to always be defined.</span></span>
<span class="line">    <span class="token comment">// Did you forget to use &#39;await&#39;?</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;true&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&#39;false&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>检查实例私有属性：</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">#someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">get</span> <span class="token function">#someValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">100</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// These work.</span></span>
<span class="line">    <span class="token comment">// We can access private-named members inside this class.</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#someValue</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">#someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//        ~~~~~~~~~~~</span></span>
<span class="line"><span class="token comment">// error!</span></span>
<span class="line"><span class="token comment">// Property &#39;#someMethod&#39; is not accessible</span></span>
<span class="line"><span class="token comment">// outside class &#39;Foo&#39; because it has a private identifier.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>#someValue</span>
<span class="line"><span class="token comment">//        ~~~~~~~~~~</span></span>
<span class="line"><span class="token comment">// error!</span></span>
<span class="line"><span class="token comment">// Property &#39;#someValue&#39; is not accessible</span></span>
<span class="line"><span class="token comment">// outside class &#39;Foo&#39; because it has a private identifier.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>静态成员私有名称：</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token function">#someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">Foo<span class="token punctuation">.</span><span class="token function">#someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//  ~~~~~~~~~~~</span></span>
<span class="line"><span class="token comment">// error!</span></span>
<span class="line"><span class="token comment">// Property &#39;#someMethod&#39; is not accessible</span></span>
<span class="line"><span class="token comment">// outside class &#39;Foo&#39; because it has a private identifier.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>模板字符串类型</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;blue&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Quantity</span> <span class="token operator">=</span> <span class="token string">&#39;one&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;two&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">SeussFish</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Quantity <span class="token operator">|</span> Color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> fish</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token comment">// same as</span></span>
<span class="line"><span class="token comment">//   type SeussFish = &quot;one fish&quot; | &quot;two fish&quot;</span></span>
<span class="line"><span class="token comment">//                  | &quot;red fish&quot; | &quot;blue fish&quot;;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">let</span> s1<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">let</span> s2<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">1-2-3</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Works!</span></span>
<span class="line">s1 <span class="token operator">=</span> s2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>属性上的写类型：</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Thing</span> <span class="token punctuation">{</span></span>
<span class="line">  #size <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">get</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#size</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">set</span> <span class="token function">size</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Don&#39;t allow NaN and stuff.</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>#size <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>#size <span class="token operator">=</span> num</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li><p>空类型 never: 函数不返回</p></li><li><p>void: 没有返回一个值的函数值的类型</p></li></ol>`,21)]))}const o=n(p,[["render",t]]),r=JSON.parse('{"path":"/ts/%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1718759308000,"contributors":[{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":5,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":3}],"changelog":[{"hash":"70b4f691e1c73f139c2f924714d83421203012ba","time":1718759308000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore(blog): 重命名"},{"hash":"735fef4741748f750b5dd64c649276680bfb8e9a","time":1718343613000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 整理"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"4fb8516a78ed45a774450e14c1882c86cd70afe4","time":1651136311000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: cypress"},{"hash":"db0b928f2b6b7d4b33d39b546e973e0f31ce8313","time":1630403261000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: nestjs应用程序"},{"hash":"caa20926555fc5de886b8513d4149353bfe14ba5","time":1621502981000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"vue:"}]},"filePathRelative":"ts/类型系统.md"}');export{o as comp,r as data};
