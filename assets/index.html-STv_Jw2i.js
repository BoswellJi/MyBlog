import{_ as s,c as a,b as e,o as p}from"./app-B56A7WC8.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>过去几年来jq插件开发已经不断发展。我们不再只有一种写插件的方式，而是有很多，实际上，某些插件设计模式可能对于特定问题或者组件会处理的更好比其他的。</p><p>许多开发者可能想要使用jq ui 部件工厂；对于复杂，灵活的ui组件非常适合，有些可能不是。一些人可能想要构建它们的插件更像模块(与现代化模块相似)或者使用多个现代化模块形式，比如amd。</p><p>有些人可能想要它们的它间使用原型继承的力量。其他人可能希望使用自定事件或者发布/订阅从插件到应用程序的其他部分进行通信。等等。</p><p>注意到大量想要创建一个统一的jq插件脚手架之后，我开始思考插件模式。虽然这样的脚手架理论上是好主意，事实上，我们很少写插件使用一种固定方式，一直使用一个单个模式。</p><p>让我们假设我们亲自尝试编写我们的jq插件某些时候，并且我们喜欢将一些事情放到一起来处理。它很有用。它会做它需要做的事情，但是，可能我们觉得它能够被构建的更好。也许它能够更灵活，或者能够设计来解决更多开发者中普遍存在的问题。如果这听起来很熟悉，那你可能发现这章很有用。其中，我们打算探索大量已经在其他开发者中广泛工作的很好的jq插件模式。</p><p>注意：这章的目标是中级到高级开发者，因此，我们会简短回顾一些jq插件基础。</p><p>如果，你没有觉得准备的够充分，我很高兴为你推荐官方的jq插件/写作指南，ben的插件风格指南和remy的这是一个写得很差的jq插件。作为优先开始这章的阅读素材。</p><h2 id="模式" tabindex="-1"><a class="header-anchor" href="#模式"><span>模式</span></a></h2><p>jq插件没有具体规则，这也是为什么在整个社区中它们的执行方式存在巨大多样性的原因之一。在大多数的基础等级中，我们可以通过在jq的jQuery.fn对象上添加新函数属性来编写简单的插件，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">myPluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// our plugin logic</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个对简洁性来说非常好,但是下面可能是更好的方案来构建它：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">$</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">myPluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// our plugin logic</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> jQuery <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们已经将我们的插件包裹在一个匿名函数中。为了确保我们使用的$标识符作为简写，不会再jq和其他js库中产生冲突。我们简单的把它传给则个闭包，它会映射到美元符。这个确保了它不会被任何外部的执行作用域影响。</p><p>编写这个模式的一个替换方案是使用jQuery.exthend()，它能够让我们一次性定义多个函数，并且有时在语义上更有意义。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">$</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span>fn<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">myplugin</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// your plugin logic</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> jQuery <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在已经回顾了一些jq插件基础，但是进一步推进这一进程，还有很多工作要做。轻量的开始是我们将探索的第一个完整的插件设计模式，我们能够使用它来做基础日常插件开发的最佳实践，并考虑了一些值得应用的常见陷阱。</p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h2><p>虽然下面大部分模式将会被解释，我推荐通过代码中的注释来阅读，因为它们将提供更多某个被应用的最佳实践的内部视角。</p><p>我还应该提到，如果没有之前的jq社区的其他成员的工作，输入，和建议这一些都是不可能的。我已经列在每个模式中都列出了它们，以至于人们可以根据兴趣来单独的阅读它们。</p><h2 id="一个轻量的开始模式" tabindex="-1"><a class="header-anchor" href="#一个轻量的开始模式"><span>一个轻量的开始模式</span></a></h2><p>让我们通过遵循最佳实践的一些基础来更深入的看看插件模式。（这些包含在jq插件编写指南中）这个模式用来给插件开发新手或者只想获得简单的事情（比如一个功能插件）。轻量的开始使用如下：</p><ol><li>普遍的最佳实践比如，函数调用之前，分号的放置（我们将通过下面的评论进行解释原因）</li><li>window,document,undefined作为参数传递</li><li>一个基础的默认值</li><li>与初始化创建逻辑有关的一个简单的插件构造器以及要处理的元素的赋值。</li><li>扩展默认选项</li><li>围绕构造器的轻量包裹器，它有助于避免问题，比如多个实例化。</li><li>jq代码风格指南的包含最小化可读性。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/*!</span>
<span class="line"> * jQuery lightweight plugin boilerplate</span>
<span class="line"> * Original author: @ajpiano</span>
<span class="line"> * Further changes, comments: @addyosmani</span>
<span class="line"> * Licensed under the MIT license</span>
<span class="line"> */</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// the semi-colon before the function invocation is a safety</span></span>
<span class="line"><span class="token comment">// net against concatenated scripts and/or other plugins</span></span>
<span class="line"><span class="token comment">// that are not closed properly.</span></span>
<span class="line"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">$<span class="token punctuation">,</span> window<span class="token punctuation">,</span> document<span class="token punctuation">,</span> <span class="token keyword">undefined</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// undefined is used here as the undefined global</span></span>
<span class="line">    <span class="token comment">// variable in ECMAScript 3 and is mutable (i.e. it can</span></span>
<span class="line">    <span class="token comment">// be changed by someone else). undefined isn&#39;t really</span></span>
<span class="line">    <span class="token comment">// being passed in so we can ensure that its value is</span></span>
<span class="line">    <span class="token comment">// truly undefined. In ES5, undefined can no longer be</span></span>
<span class="line">    <span class="token comment">// modified.</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// window and document are passed through as local</span></span>
<span class="line">    <span class="token comment">// variables rather than as globals, because this (slightly)</span></span>
<span class="line">    <span class="token comment">// quickens the resolution process and can be more</span></span>
<span class="line">    <span class="token comment">// efficiently minified (especially when both are</span></span>
<span class="line">    <span class="token comment">// regularly referenced in our plugin).</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Create the defaults once</span></span>
<span class="line">    <span class="token keyword">var</span> pluginName <span class="token operator">=</span> <span class="token string">&quot;defaultPluginName&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        defaults <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">propertyName</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// The actual plugin constructor</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Plugin</span><span class="token punctuation">(</span> <span class="token parameter">element<span class="token punctuation">,</span> options</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">// jQuery has an extend method that merges the</span></span>
<span class="line">        <span class="token comment">// contents of two or more objects, storing the</span></span>
<span class="line">        <span class="token comment">// result in the first object. The first object</span></span>
<span class="line">        <span class="token comment">// is generally empty because we don&#39;t want to alter</span></span>
<span class="line">        <span class="token comment">// the default options for future instances of the plugin</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>_defaults <span class="token operator">=</span> defaults<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> pluginName<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token class-name">Plugin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Place initialization logic here</span></span>
<span class="line">        <span class="token comment">// We already have access to the DOM element and</span></span>
<span class="line">        <span class="token comment">// the options via the instance, e.g. this.element</span></span>
<span class="line">        <span class="token comment">// and this.options</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// A really lightweight plugin wrapper around the constructor,</span></span>
<span class="line">    <span class="token comment">// preventing against multiple instantiations</span></span>
<span class="line">    $<span class="token punctuation">.</span>fn<span class="token punctuation">[</span>pluginName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">options</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>$<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin_&quot;</span> <span class="token operator">+</span> pluginName <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                $<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin_&quot;</span> <span class="token operator">+</span> pluginName<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> options <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> jQuery<span class="token punctuation">,</span> window<span class="token punctuation">,</span> document <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#elem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultPluginName</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">propertyName</span><span class="token operator">:</span> <span class="token string">&quot;a custom value&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步阅读</p><ol><li>插件/写作，jq</li><li>一个差劲的编写jq插件标识</li><li>如何创建自己的jq创建</li><li>创建你的第一个jq插件,第二部分</li></ol><h2 id="完整的部件工厂模式" tabindex="-1"><a class="header-anchor" href="#完整的部件工厂模式"><span>完整的部件工厂模式</span></a></h2><p>虽然jq插件写作指南是一个很好的插件开发介绍，这并不能掩盖常见的插件管道任务，我们需要用常规的基础来处理。</p><p>jq ui部件工厂是这个问题的解决方案，它帮助我们构建复杂的，有状态的插件，基于面向对象的原则。它还简化了与我们的插件实例的沟通，混淆一些重复的任务，我们能够去编码，在处理基础插件时候。</p><p>有状态插件帮助我们对它们当前状态的追踪，还允许我们改变插件的属性在插件初始化之后。</p><p>关于部件工厂最好的事情之一是事实上大多数jq ui库使用它作为它的组件的基础。这意味着，如果我们要寻找这个模式之外的结构的进一步指导，我们不必去看github上的jqui库。</p><p>这个jq ui部件工厂模式涉及了几乎所有受支持的默认工厂方法，包括触发事件。根据上一个模式，评论包含所有被使用的方法以及被指定在行内注释的进一步指导。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/*!</span>
<span class="line"> * jQuery UI Widget-factory plugin boilerplate (for 1.8/9+)</span>
<span class="line"> * Author: @addyosmani</span>
<span class="line"> * Further changes: @peolanha</span>
<span class="line"> * Licensed under the MIT license</span>
<span class="line"> */</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">$<span class="token punctuation">,</span> window<span class="token punctuation">,</span> document<span class="token punctuation">,</span> <span class="token keyword">undefined</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// define our widget under a namespace of your choice</span></span>
<span class="line">    <span class="token comment">// with additional parameters e.g.</span></span>
<span class="line">    <span class="token comment">// $.widget( &quot;namespace.widgetname&quot;, (optional) - an</span></span>
<span class="line">    <span class="token comment">// existing widget prototype to inherit from, an object</span></span>
<span class="line">    <span class="token comment">// literal to become the widget&#39;s prototype );</span></span>
<span class="line"> </span>
<span class="line">    $<span class="token punctuation">.</span><span class="token function">widget</span><span class="token punctuation">(</span> <span class="token string">&quot;namespace.widgetname&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">//Options to be used as defaults</span></span>
<span class="line">        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">someValue</span><span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">//Setup widget (e.g. element creation, apply theming</span></span>
<span class="line">        <span class="token comment">//, bind events etc.)</span></span>
<span class="line">        <span class="token function-variable function">_create</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">// _create will automatically run the first time</span></span>
<span class="line">            <span class="token comment">// this widget is called. Put the initial widget</span></span>
<span class="line">            <span class="token comment">// setup code here, then we can access the element</span></span>
<span class="line">            <span class="token comment">// on which the widget was called via this.element.</span></span>
<span class="line">            <span class="token comment">// The options defined above can be accessed</span></span>
<span class="line">            <span class="token comment">// via this.options this.element.addStuff();</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">// Destroy an instantiated plugin and clean up</span></span>
<span class="line">        <span class="token comment">// modifications the widget has made to the DOM</span></span>
<span class="line">        <span class="token function-variable function">destroy</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">// this.element.removeStuff();</span></span>
<span class="line">            <span class="token comment">// For UI 1.8, destroy must be invoked from the</span></span>
<span class="line">            <span class="token comment">// base widget</span></span>
<span class="line">            $<span class="token punctuation">.</span><span class="token class-name">Widget</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// For UI 1.9, define _destroy instead and don&#39;t</span></span>
<span class="line">            <span class="token comment">// worry about</span></span>
<span class="line">            <span class="token comment">// calling the base widget</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">        <span class="token function-variable function">methodB</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">event</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//_trigger dispatches callbacks the plugin user</span></span>
<span class="line">            <span class="token comment">// can subscribe to</span></span>
<span class="line">            <span class="token comment">// signature: _trigger( &quot;callbackName&quot;, [eventObject],</span></span>
<span class="line">            <span class="token comment">// [uiObject] )</span></span>
<span class="line">            <span class="token comment">// e.g. this._trigger( &quot;hover&quot;, e /*where e.type ==</span></span>
<span class="line">            <span class="token comment">// &quot;mouseenter&quot;*/, { hovered: $(e.target)});</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_trigger</span><span class="token punctuation">(</span> <span class="token string">&quot;methodA&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">key</span><span class="token operator">:</span> value</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">        <span class="token function-variable function">methodA</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">event</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_trigger</span><span class="token punctuation">(</span> <span class="token string">&quot;dataChanged&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">key</span><span class="token operator">:</span> value</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">// Respond to any changes the user makes to the</span></span>
<span class="line">        <span class="token comment">// option method</span></span>
<span class="line">        <span class="token function-variable function">_setOption</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">key<span class="token punctuation">,</span> value</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">switch</span> <span class="token punctuation">(</span> key <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;someValue&quot;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// this.options.someValue = doSomethingWith( value );</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token comment">// this.options[ key ] = value;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">// For UI 1.8, _setOption must be manually invoked</span></span>
<span class="line">            <span class="token comment">// from the base widget</span></span>
<span class="line">            $<span class="token punctuation">.</span><span class="token class-name">Widget</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">_setOption</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> arguments <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// For UI 1.9 the _super method can be used instead</span></span>
<span class="line">            <span class="token comment">// this._super( &quot;_setOption&quot;, key, value );</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> jQuery<span class="token punctuation">,</span> window<span class="token punctuation">,</span> document <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> collection <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#elem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">widgetName</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">collection<span class="token punctuation">.</span><span class="token function">widgetName</span><span class="token punctuation">(</span><span class="token string">&quot;methodB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步阅读</p><ol><li>jq ui部件工厂</li><li>有状态插件和部件工厂的介绍</li><li>部件工厂</li><li>理解jq ui 部件：教程</li></ol><h2 id="嵌套名称空间的插件模式" tabindex="-1"><a class="header-anchor" href="#嵌套名称空间的插件模式"><span>嵌套名称空间的插件模式</span></a></h2><p>像我们之前在书中涉及到的，我们代码的名称空间是为了避免与全局名称空间中其他对象和变量冲突的方式。它们很重要，因为我们想保护我们的插件，当页面上的另一个脚本使用与我们相同的变量或者插件名时，我们的插件不会被破坏。作为一个全局名称空间的好公民，我们还必须尽自己最大的努力，不要阻止其他开发人员脚本的执行。</p>`,40)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12jq%E6%8F%92%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":5,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"2fc255111ecffea33341e0e68a1692a23548590e","time":1609983055000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"js:设计模式"}]},"filePathRelative":"books/javascript/javascript设计模式/12jq插件设计模式/readme.md"}');export{o as comp,u as data};
