import{_ as s,c as a,b as e,o as p}from"./app-B56A7WC8.js";const t={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>在观察者模式的这节中，我们通过一个单一对象来引入引导多个事件源的方式。这个还被称作 <code>发布/订阅</code> 或者 <code>事件聚合</code> 。当面对这个问题时，开发者通常会想到中介者。所以，让我们探索一下，它们是如何不同。</p><p>词典上称中介者是包含谈判和冲突的解决方案的中立方。在我们的世界中，中介者是行为设计模式，它允许我们暴露统一的接口，系统不同的部分通过它来交流。</p><p>如果它出现在一个组件间有更多直接关系的系统中，可能是时候有一个控制中心点来替代组件交流。中介者通过确保组件之间显式引用而不是相互引用来促进松耦合，它们的交互通过中心点来处理。这个能够帮助我们解耦系统以及改善组件可复用的能力。</p><p>一个现实生活中的类比是一个典型的飞机交通控制系统。塔台处理飞机起飞和落地因为所有的交流从飞机到控制塔来完成，而不是飞机到飞机。一个中心控制器是这个系统成功的关键并且那是中介者在软件设计中扮演的真正角色。</p><p>另一个类比是dom事件冒泡和事件委托。如果所有系统中的订阅是针对文档进行而不是独立的节点，实际上，文档服务作为中介者。替代独立节点的事件绑定，一个更高层的对象的责任是通知订阅者有关交互的事件。</p><p>当想起中介者模式和事件聚合器模式时，有些时候，模式看起来是可以互换的，由于实现很相似。但是语义和这些模式的目的很不同。</p><h2 id="简单的中介者" tabindex="-1"><a class="header-anchor" href="#简单的中介者"><span>简单的中介者</span></a></h2><p>一个中介者是一个多个对象之间的坐标交互（逻辑和行为）对象。当调用哪个对象就会在它上作决定，基于其他对象的交互以及输入。</p><p>你能使用一个单独的行内代码编写一个观察者：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> mediator <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>是的，当然这个只是js中的一个对象字面量。再一次，这里我们正在讨论语义。中介者的目的是控制对象之间的工作流以及我们真的不需要比对象字面量更多的事情来处理这个。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> orgChart <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token function-variable function">addNewEmployee</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// getEmployeeDetail provides a view that users interact with</span></span>
<span class="line">        <span class="token keyword">var</span> employeeDetail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEmployeeDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// when the employee detail is complete, the mediator (the &#39;orgchart&#39; object)</span></span>
<span class="line">        <span class="token comment">// decides what should happen next</span></span>
<span class="line">        employeeDetail<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;complete&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">employee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// set up additional objects that have additional events, which are used</span></span>
<span class="line">            <span class="token comment">// by the mediator to do additional things</span></span>
<span class="line">            <span class="token keyword">var</span> managerSelector <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectManager</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            managerSelector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;save&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">employee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                employee<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个案例展示了一个非常基础的中介者对象的实现，它有一些能触发和定语事件的实用方法。</p><p>我过去经常称这个对象类型为工作流对象，但是事实是它不是一个中介者。它是一个在许多其他对象之间处理工作流的对象。将工作流知识的职责聚合到单个对象中。结果是得到更容易理解和维护的工作流。</p><h2 id="相似和不同" tabindex="-1"><a class="header-anchor" href="#相似和不同"><span>相似和不同</span></a></h2><p>毫无疑问，这里已经展示的事件聚集器和中介者案例之间有相似。相似的点下至两个主要项目: 事件和第三方对象。即使这些不同最多是表面的。当我们深入研究模式的目的以及看到的明显不同的实现时，模式的本质变得更加明显。</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><p>在上面的案例中，事件聚集器和中介者都使用事件。事件处理器显然处理事件，毕竟在名字中就有。中介者只使用事件，因为当处理现代jswebapp框架时，它会使得生活更简单。没人说中介者一定要用事件来构建。你能使用回调方法来构建中介者，通过中介者手动引用子对象，或者通过人恶化其他方式的数字。</p><p>不同是这两个模式都使用事件的原因。事件聚集器作为一个模式，被设计用来处理事件。中介者，即使知识因为用它们比较方便。</p><h2 id="第三方对象" tabindex="-1"><a class="header-anchor" href="#第三方对象"><span>第三方对象</span></a></h2><p>通过设计，事件聚集器和中介者两个都使用一个简化事物的第三方对象。事件聚集器本身是一个事件发布者的第三方以及事件订阅者。它扮演事件传输的中心枢纽。然而，中介者也是其他对象的第三方。所以不同的地方在哪？为什么我们不能叫事件聚集器为中介者？大部分答案落到了应用程序逻辑和编码的工作流中。</p><p>在事件聚集器的案例中，第三方对象在这里只是简化从未知的源数字到未知的处理器数字的事件传输。需要启动的所有工作流和业务逻辑，被直接放到触发事件的对象和处理事件的对象上。 中介者决定一个对象应该什么时候基于中介者了解的因素来调用方法和更新属性。它封装了工作流和过程，根据多对象来生成想要的系统行为。独立的对象在这个工作流中被涉及，每个对象都知道如何执行它们自己的任务。但是中介者告诉对象，由比单个对象更高级别来决定什么时候执行任务。</p><p>事件聚合器促进 <code>触发和忘记</code> 的交流模型。触发事件的对象不用关心是否由订阅者。它只触发事件然后继续前进。不过，中介者或许使用事件来做决定，但是它绝不 <code>触发和忘记</code> 。中介者注意一组已知的输入和活动以至于它能促进和调节额外带有一组已知的因素的行为。</p><h2 id="关系-什么时候使用哪一个" tabindex="-1"><a class="header-anchor" href="#关系-什么时候使用哪一个"><span>关系：什么时候使用哪一个</span></a></h2><p>理解事件聚合器与中介者之间的相似之处和不同对于语义理由很重要。不过，理解什么时候使用哪种模式同样重要。基础的语义和模式的目的告诉了时候的问题，但是使用这个模式的实际经验会帮助你理解更多细微的点以及必须做的细微的决定。</p><h2 id="事件聚合器的用途" tabindex="-1"><a class="header-anchor" href="#事件聚合器的用途"><span>事件聚合器的用途</span></a></h2><p>一般来说，事件聚合器被用在，不管你有太多直接监听的对象还是有完全不相关的对象。</p><p>当两个对象已经有直接关系时-比如，一个父视图和子视图，可能使用事件聚合器会有好处。让子视图触发事件以及父视图处理事件。在js框架术语中，这个在backbonejs的collection和model中最普遍看到的。其中所有的模型事件被冒泡并通过它的父集合。一个集合经常使用模型事件来修改自己的状态或者其他模型。操作集合中的选中项目是个的好案例。</p><p>jq的on方法作为一个事件聚合器是一个极好的监听太多对象的例子。如果你有10，20，或者200个dom对象，它们触发点击事件，给它们所有独立安装监听器可能会是一个坏想法。这个可能会快速恶化应用程序的性能和用户体验。反而，使用jq的on方法允许我们聚合所有事件以及减少10，20或者200个事件的负担到1。</p><p>间接关系也是使用事件聚合器的好时机。在现代化的应用程序中，有多个需要交流的视图对象非常普遍，但是没有直接关系。例如，菜单系统货物亿欧一个处理菜单项点击的视图。但是我们不想菜单直接依赖展示所有细节和信息的内容视图当菜单项被点击的时候。让内容和菜单耦合在一起可能使得代码非常难以维护，在长期运行当中。反而，我们能够使用事件聚合器来触发 <code>menu:click:foo</code> 事件，以及有一个foo对象处理在屏幕上展示它的内容的点击事件。</p><h2 id="中介者用途" tabindex="-1"><a class="header-anchor" href="#中介者用途"><span>中介者用途</span></a></h2><p>一个中介者最好应用在有两个或多个对象有一个间接的工作关系的时候，以及业务逻辑或者工作流需要说明互动和这些对象调整。</p><p>一个象到程序界面是个好例子，像上面orgChart展示的那样。有多个促进整个向导程序工作流的视图。而不是让它们直接互相引用紧耦合视图在一起，我们能通过引入一个中介者解耦它们以及更明确模型工作流。</p><p>中介者从实现细节中提取工作流以及在更高等级创建一个更自然的抽象，以更快的速度展示给我们工作流是什么。我们不再深入工作流中每个视图的细节，看看工作流到底是什么。</p><h2 id="事件聚合器-发布-订阅-和中介者一起" tabindex="-1"><a class="header-anchor" href="#事件聚合器-发布-订阅-和中介者一起"><span>事件聚合器（发布/订阅）和中介者一起</span></a></h2><p>事件聚合器（发布/订阅）和中介者之间不同点的关键，以及为什么这些模式的名字不应该互相交换，通过展示它们如何使用在一起最能说明了。事件聚合器的菜单案例也是引入中介者的理想位置。</p><p>点击一个菜单项能够触发遍及整个应用程序的一系列更改。其中一些变化是独立的，使用事件聚合器是有意义的。其中的一些变化可能是内部相关的。不过，可能使用一个中介者来执行这些变化。</p><p>然后，一个中介者可能被安装了事件聚合器的监听。可以运行他的逻辑和过程来促进和调整相互关联的对象，但是不关联原始事件源。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> MenuItem <span class="token operator">=</span> MyFrameworkView<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-property property">&quot;click .thatThing&quot;</span><span class="token operator">:</span> <span class="token string">&quot;clickedIt&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">clickedIt</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// assume this triggers &quot;menu:click:foo&quot;</span></span>
<span class="line">    MyFramework<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;menu:click:&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// ... somewhere else in the app</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">MyWorkflow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  MyFramework<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;menu:click:foo&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doStuff<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">MyWorkflow</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doStuff</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// instantiate multiple objects here.</span></span>
<span class="line">  <span class="token comment">// set up event handlers for those objects.</span></span>
<span class="line">  <span class="token comment">// coordinate all of the objects into a meaningful workflow.</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当MenuItem和右边模型被点击时，<code>menu:click:foo</code>事件将被触发。一个<code>MyWorkflow</code>对象的实例，假设它已经被实例化一个了，用来处理特定的事件和调整所有了解的对象，创建想要的用户体验和工作流。</p><p>事件聚合器以及中介者已经被合并用来在代码和应用程序本身中创建更有意义的体验。现在我们在菜单和工作流之间有一个干净的分离通过事件聚合器以及我们仍然通过中介者的用法来保持工作流本身整洁可维护。</p><h2 id="优点和缺点" tabindex="-1"><a class="header-anchor" href="#优点和缺点"><span>优点和缺点</span></a></h2><p>中介者模式最大的好处是减少系统中对象或者组件之间需要交流的频道，从多对多减少到一对多。添加新的发布者和订阅者相对容易，由于当前的解耦程度。</p><p>可能使用这个模式最大的下降趋势是它会引入一个失败的单点。模块之间放置中介者还能导致性能伤害因为它们一直间接交流。因为松耦合的本质，通过唯一的广播很难确定一个系统会如何响应。</p><p>那就是说，提醒我们自己解耦系统有大量其他好处是有用的。如果我们的模块之间互相直接交流，变更模块很容易影响我们的应用程序的剩余部分。这个问题在解耦系统中很少受到关注。</p><p>最终，紧耦合导致所有头疼的类型而且这个只是另一个替代的解决方案，但是如果正确实现，他可能工作的很好。</p><h2 id="中介者和门面" tabindex="-1"><a class="header-anchor" href="#中介者和门面"><span>中介者和门面</span></a></h2><p>稍后我们将会涉及到门面模式，如果没有参考目标，一些开发者可能还想要了解终结者和门面模式之间是否存在相似之处。它们都抽象了现存模块的功能，但是有一些细微的不同。</p><p>中介者中心化模块之间的交流，其中通过这些模块被显式引用，从某种意义上说，这是多方面的。但是，门面模式只定义了一个简单的模块或系统引用，但不添加任何额外的功能。系统中的其他模块不会直接意识到门面的概念以及能够被认为单向的。</p>`,49)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":2,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"e0a81c3963ab4d95018a2b28bc9683484ad534d4","time":1606307283000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/5中介者模式.md"}');export{i as comp,u as data};
