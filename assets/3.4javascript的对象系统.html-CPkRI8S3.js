import{_ as e,c as i,b as l,o as m}from"./app-B56A7WC8.js";const s={};function c(h,a){return m(),i("div",null,a[0]||(a[0]=[l('<h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2><ul><li><p>js只能依赖变量作用域来实现封装特性，只能实现public, private;</p></li><li><p>依赖于代码 <code>运行期间</code> 的 <code>可见性</code> 的效果;</p></li></ul><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><ul><li><p>多态性表达为两个方面： 类型的模糊和类型的确认（或者识别；</p></li><li><p>js中的类型模糊：通过typeof，检查的变量，只有object, 和基本类型；</p></li><li><p>js中的类型识别：通过instanceof, 对于object类型来进行区分；</p></li></ul><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><ul><li><p>properties, methods, events作为对象系统的完整的外在表现来讨论；</p></li><li><p>同时，接口系统也表达为pme这三个方面；</p></li><li><p>大部分高级语言自身没有，事件系统；而是应用框架在使用对象系统时，实现的一个额外的机制；</p></li><li><p>事件的本质： 在确定的时候发生的，可由用户代码响应的行为而已；</p></li></ul><h2 id="类抄写-或原型继承" tabindex="-1"><a class="header-anchor" href="#类抄写-或原型继承"><span>类抄写？或原型继承？</span></a></h2><ul><li><p>构造对象系统的5种方法：</p><ul><li>在构造器中，写 <code>this</code></li><li>在构造器中，直接返回对象实例</li><li>修改原型</li><li>重写原型</li><li>继承原型</li></ul></li><li><p>类抄写</p><ul><li>使用call，apply方法替换函数的上下文对象，抄写类的成员；</li></ul></li><li><p>原型继承</p></li></ul><h2 id="js中的对象-构造器" tabindex="-1"><a class="header-anchor" href="#js中的对象-构造器"><span>js中的对象（构造器</span></a></h2><ul><li><p>内置对象和原生对象区别？</p><ul><li>前者总是在引擎初始化阶段被创建好的对象，是后者的子集，后者包括一些在运行过程中动态创建的对象；</li></ul></li><li><p>内置对象中，只有Error, Data没有直接量语法，只以构造器的形式存在；Math是对象，不是构造器；</p></li><li><p>原生对象</p><ul><li>引擎在执行代码过程中，动态创建的对象： <ul><li>调用函数时的，arguments</li></ul></li></ul></li><li><p>引擎拓展对象</p></li><li><p>宿主对象，不是引擎的原生对象，而是宿主框架通过机制，注册到js引擎中的对象；</p><ul><li>访问Global对象，需要通过宿主对象获取；</li></ul></li></ul><h2 id="不能通过继承得到的效果" tabindex="-1"><a class="header-anchor" href="#不能通过继承得到的效果"><span>不能通过继承得到的效果</span></a></h2>',11)]))}const t=e(s,[["render",c]]),n=JSON.parse('{"path":"/books/javascript/javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E9%AB%93%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5/3.javascript%E7%9A%84%E9%9D%9E%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/3.4javascript%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%B3%BB%E7%BB%9F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":10,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"e7bca14f7896e4704bed67a1b4199f3a06f5996c","time":1596885946000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript语言精髓与编程语言实践/3.javascript的非函数式语言特性/3.4javascript的对象系统.md"}');export{t as comp,n as data};
