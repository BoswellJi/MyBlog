import{_ as o,c as a,b as r,o as t}from"./app-B56A7WC8.js";const c={};function d(l,e){return t(),a("div",null,e[0]||(e[0]=[r('<h2 id="starportcarrier-星港搬运器" tabindex="-1"><a class="header-anchor" href="#starportcarrier-星港搬运器"><span>StarportCarrier 星港搬运器</span></a></h2><ul><li>用于创建星港的全局飞行器；</li></ul><h2 id="starportcraft-星港飞行器" tabindex="-1"><a class="header-anchor" href="#starportcraft-星港飞行器"><span>StarportCraft 星港飞行器</span></a></h2><ul><li>用于将星港从老位置移动到新位置<strong>它的位置大小和<code>StarportProxy</code>组件相同</strong>；</li><li>获取<code>portMap</code>中的存储的<code>Starport</code>的上下文信息；</li></ul><h2 id="starport-星港" tabindex="-1"><a class="header-anchor" href="#starport-星港"><span>Starport 星港</span></a></h2><ul><li>用于创建星港容器，每个星港容器都有一个唯一的标识；</li><li>通过获取插槽组件，创建星港代理组件，同时将插槽组件添加到全局状态<code>portMap</code>中；</li></ul><h2 id="starportproxy-星港代理" tabindex="-1"><a class="header-anchor" href="#starportproxy-星港代理"><span>StarportProxy 星港代理</span></a></h2><ul><li>用于创建星港元素；</li><li>记录<code>StarportProxy</code>的dom信息，到<code>portMap</code>中；</li><li>用来存放<code>StarportCraft</code>的<code>Teleport</code>移动的元素；</li><li>跳转路由后，获取指定<code>port</code>的<code>Starport</code>,获取当前的<code>StarportProxy</code>的dom信息；</li></ul><h2 id="createinternalstate" tabindex="-1"><a class="header-anchor" href="#createinternalstate"><span>createInternalState</span></a></h2><ul><li>根据星港唯一标识获取星港实例/创建星港实例/删除星港实例；</li></ul><h2 id="createstarportinstance" tabindex="-1"><a class="header-anchor" href="#createstarportinstance"><span>createStarportInstance</span></a></h2><ul><li>创建星港实例，所有状态参数；</li></ul><h2 id="动画流程" tabindex="-1"><a class="header-anchor" href="#动画流程"><span>动画流程</span></a></h2><ol><li><p>创建<code>StarportCarrier</code>,初始化时<code>portMap</code>为空,所以不会创建<code>StarportCraft</code>;</p></li><li><p>跳转人默认路由,创建<code>Starport</code>,<code>Starport</code>内部创建<code>StarportProxy</code>,<code>StarportProxy</code>内部会创建<code>StarportInstance</code>并存入<code>portMap</code>,并且安装之后将<code>StarportProxy</code>的根元素 dom 对象赋值给<code>StarportInstance</code>属性<code>el</code>,因为<code>StarportCarrier</code>渲染函数中使用了<code>portMap</code>,所以当<code>portMap</code>更新后,会重新渲染,创建<code>StarportCraft</code>,其中会拿到安装的<code>StarportProxy</code>的 dom 对象实例，所以可以获取 dom 的尺寸位置,就会将<code>StarportCraft</code>组件移动到<code>StarportProxy</code>位置,<code>StarportCraft</code>中创建的<code>Teleport</code>会将插槽组件,移动到对应的<code>StarportProxy</code>中创建的目标<code>DOM</code>中:</p><ul><li>初始化星港<code>starport</code>生成对应的飞行器<code>StarportCraft</code>这时有了飞行器的初始化样式也就是<code>对应的星港的样式</code>；</li></ul></li><li><p>跳转页面时:</p><ul><li><code>RouterView</code>中切目标换路由,创建其中的<code>Starport</code>: <ul><li>获取<code>Starportproxy</code>的位置尺寸信息;</li><li>首先将飞行器<code>display:block</code>，因为飞行器落地后，会<code>display:none</code>飞行器；</li><li>飞行器将星港元素添加到<code>Teleport</code>组件插槽中，切换<code>StarportCraft</code>飞行器的样式到<code>目标星港样式</code>；</li><li>到目的地后<code>display:none</code>飞行器，将<code>Teleport</code>中的插槽内容<code>星港</code>放到目标位置；</li></ul></li></ul></li></ol>',14)]))}const p=o(c,[["render",d]]),s=JSON.parse('{"path":"/vue/vue-startport%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1718759308000,"contributors":[{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"70b4f691e1c73f139c2f924714d83421203012ba","time":1718759308000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore(blog): 重命名"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"1fd748f0b31126f70e1fcfac00396ae242bb840c","time":1650540272000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: video click兼容问题"},{"hash":"31432ff2f5ba60254f7856a0dc8f747072cc16af","time":1649932404000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: vue3"}]},"filePathRelative":"vue/vue-startport内部机制.md"}');export{p as comp,s as data};
