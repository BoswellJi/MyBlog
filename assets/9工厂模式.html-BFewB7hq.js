import{_ as n,c as a,b as e,o as p}from"./app-B56A7WC8.js";const t={};function c(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<p>工厂模式是另一个与创建对象的概念有关的创建型模式。其中它与同分类中的其他模式不同的是它不需要显式使用构造函数。反而，工厂能提供一个创建对象的一般性接口，其中，我们可以指定我们想要创建的工厂对象类型。</p><p>想象一下，我们有一个界面工厂，其中，我们要创建一个UI组件的类型。而不是直接使用new操作符创建这个组件或者通过另一个创建型构造函数。我们向工厂对象请求一个新组件。我们通知工厂需要什么对象类型（例如：Button，Panel）以及实例化对象，返回给我们使用。</p><p>如果对象创建过程相当复杂，这回特别有用，例如：如果强依赖动态工厂或者应用配置。</p><p>这个模式的案例能够在界面库Extjs中找到，其中创建对象或组件的方法可能被进一步派生子类。</p><p>下面是构建在之前使用构造器模式定义Car的逻辑的片段之上。演示Vehicle工厂如何使用工厂模式来实现：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Types.js - Constructors used behind the scenes</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// A constructor for defining new cars</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span> <span class="token parameter">options</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// some defaults</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>doors <span class="token operator">=</span> options<span class="token punctuation">.</span>doors <span class="token operator">||</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> options<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token string">&quot;brand new&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> options<span class="token punctuation">.</span>color <span class="token operator">||</span> <span class="token string">&quot;silver&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// A constructor for defining new trucks</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Truck</span><span class="token punctuation">(</span> <span class="token parameter">options</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> options<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token string">&quot;used&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>wheelSize <span class="token operator">=</span> options<span class="token punctuation">.</span>wheelSize <span class="token operator">||</span> <span class="token string">&quot;large&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> options<span class="token punctuation">.</span>color <span class="token operator">||</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// FactoryExample.js</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Define a skeleton vehicle factory</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">VehicleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Define the prototypes and utilities for this factory</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Our default vehicleClass is Car</span></span>
<span class="line"><span class="token class-name">VehicleFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>vehicleClass <span class="token operator">=</span> Car<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Our Factory method for creating new Vehicle instances</span></span>
<span class="line"><span class="token class-name">VehicleFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">createVehicle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">options</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">switch</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>vehicleType<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;car&quot;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>vehicleClass <span class="token operator">=</span> Car<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&quot;truck&quot;</span><span class="token operator">:</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>vehicleClass <span class="token operator">=</span> Truck<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//defaults to VehicleFactory.prototype.vehicleClass (Car)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">this<span class="token punctuation">.</span>vehicleClass</span><span class="token punctuation">(</span> options <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Create an instance of our factory that makes cars</span></span>
<span class="line"><span class="token keyword">var</span> carFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VehicleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> car <span class="token operator">=</span> carFactory<span class="token punctuation">.</span><span class="token function">createVehicle</span><span class="token punctuation">(</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">vehicleType</span><span class="token operator">:</span> <span class="token string">&quot;car&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;yellow&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">doors</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Test to confirm our car was created using the vehicleClass/prototype Car</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> car <span class="token keyword">instanceof</span> <span class="token class-name">Car</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: Car object of color &quot;yellow&quot;, doors: 6 in a &quot;brand new&quot; state</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> car <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法1： 修改VehicleFactory实例以使用Truck类：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">TruckFactory</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">TruckFactory</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VehicleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TruckFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>vehicleClass <span class="token operator">=</span> Truck<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> truckFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TruckFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> myBigTruck <span class="token operator">=</span> truckFactory<span class="token punctuation">.</span><span class="token function">createVehicle</span><span class="token punctuation">(</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">&quot;omg..so bad.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">wheelSize</span><span class="token operator">:</span> <span class="token string">&quot;so big&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Confirms that myBigTruck was created with the prototype Truck</span></span>
<span class="line"><span class="token comment">// Outputs: true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myBigTruck <span class="token keyword">instanceof</span> <span class="token class-name">Truck</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: Truck object with the color &quot;pink&quot;, wheelSize &quot;so big&quot;</span></span>
<span class="line"><span class="token comment">// and state &quot;omg. so bad&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myBigTruck <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法2：子类VehicleFactory创建构建Trucks的工厂类</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">TruckFactory</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">TruckFactory</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VehicleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">TruckFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>vehicleClass <span class="token operator">=</span> Truck<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> truckFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TruckFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> myBigTruck <span class="token operator">=</span> truckFactory<span class="token punctuation">.</span><span class="token function">createVehicle</span><span class="token punctuation">(</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">&quot;omg..so bad.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;pink&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">wheelSize</span><span class="token operator">:</span> <span class="token string">&quot;so big&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Confirms that myBigTruck was created with the prototype Truck</span></span>
<span class="line"><span class="token comment">// Outputs: true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myBigTruck <span class="token keyword">instanceof</span> <span class="token class-name">Truck</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: Truck object with the color &quot;pink&quot;, wheelSize &quot;so big&quot;</span></span>
<span class="line"><span class="token comment">// and state &quot;omg. so bad&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myBigTruck <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么时候使用工厂模式" tabindex="-1"><a class="header-anchor" href="#什么时候使用工厂模式"><span>什么时候使用工厂模式：</span></a></h2><p>应用到下面情况时，工厂模式特别有用：</p><ol><li>对象或组件安装涉及高层复杂度</li><li>我们需要简单创建，依赖于我们所处环境的不同对象实例</li><li>我们与许多共享相同属性的小对象或者组件共同作用时</li><li>与其他对象的实例组合对象时，只要满足api契约（即：鸭子类型）。这有利于解耦。</li></ol><h2 id="什么时候不使用工厂模式" tabindex="-1"><a class="header-anchor" href="#什么时候不使用工厂模式"><span>什么时候不使用工厂模式：</span></a></h2><p>应用给不当的的问题类型，这个模式会给应用程序引入大量不必要的复杂度。除非为对象创建提供接口是我们正在编写的库或者框架的设计目标，我建议使用显示构造函数来避免不必要的负担。</p><p>由于，接口背后是有效的抽像对象创建过程，这也会在单元测试中引入问题，具体取决于这个过程的复杂程度。</p><h2 id="抽象工厂" tabindex="-1"><a class="header-anchor" href="#抽象工厂"><span>抽象工厂</span></a></h2><p>知道抽象工厂模式也是有用的，他的目的是为了封装一组有共同目标的单个工厂。从它们一般使用的对象集中分离实现细节。</p><p>当系统必须独立于它创建的对象的生成方式，或者它需要处理多种类型的对象时，应该使用抽象工厂。</p><p>简单又容易理解的案例是一个vehicle工厂，它定义了获取或者注册vehicles类型的方式。这个抽象工厂能被命名为abstractVehicleFactory。抽象工厂允许像car,truck类型的定义，具体工厂实现只是实现vehicle契约的类。（例如： Vehicle.prototype.drive和Vehicle.prototype.breakDown）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">ar abstractVehicleFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// Storage for our vehicle types</span></span>
<span class="line">  <span class="token keyword">var</span> types <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function-variable function">getVehicle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">type<span class="token punctuation">,</span> customizations</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">var</span> Vehicle <span class="token operator">=</span> types<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">(</span>Vehicle <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span>customizations<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">      <span class="token function-variable function">registerVehicle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">type<span class="token punctuation">,</span> Vehicle</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">var</span> proto <span class="token operator">=</span> <span class="token class-name">Vehicle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">          <span class="token comment">// only register classes that fulfill the vehicle contract</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span> proto<span class="token punctuation">.</span>drive <span class="token operator">&amp;&amp;</span> proto<span class="token punctuation">.</span>breakDown <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              types<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> Vehicle<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">          <span class="token keyword">return</span> abstractVehicleFactory<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Usage:</span></span>
<span class="line"> </span>
<span class="line">abstractVehicleFactory<span class="token punctuation">.</span><span class="token function">registerVehicle</span><span class="token punctuation">(</span> <span class="token string">&quot;car&quot;</span><span class="token punctuation">,</span> Car <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">abstractVehicleFactory<span class="token punctuation">.</span><span class="token function">registerVehicle</span><span class="token punctuation">(</span> <span class="token string">&quot;truck&quot;</span><span class="token punctuation">,</span> Truck <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Instantiate a new car based on the abstract vehicle type</span></span>
<span class="line"><span class="token keyword">var</span> car <span class="token operator">=</span> abstractVehicleFactory<span class="token punctuation">.</span><span class="token function">getVehicle</span><span class="token punctuation">(</span> <span class="token string">&quot;car&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;lime green&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">&quot;like new&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Instantiate a new truck in a similar manner</span></span>
<span class="line"><span class="token keyword">var</span> truck <span class="token operator">=</span> abstractVehicleFactory<span class="token punctuation">.</span><span class="token function">getVehicle</span><span class="token punctuation">(</span> <span class="token string">&quot;truck&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">wheelSize</span><span class="token operator">:</span> <span class="token string">&quot;medium&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;neon yellow&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21)]))}const i=n(t,[["render",c]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":15,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"21a984d8237cbb94179c1235309f687e4da9f16e","time":1608203842000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: 命令模式"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"2588ecbf370e3d7565203fdf3c6bc1dd9b7b343f","time":1598440472000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"算法+英语："},{"hash":"f84f48ca2b46b48d67e6442134732dd42c11a116","time":1597766382000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"jacascript"},{"hash":"b5bfb66219bb9504b28f6e7874430cdf50311d19","time":1597590917000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"19e9eb18c66100cfc59e853a51f91f7efd0f5f12","time":1596989722000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/9工厂模式.md"}');export{i as comp,u as data};
