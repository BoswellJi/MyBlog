import{_ as s,c as a,b as e,o as p}from"./app-B56A7WC8.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>在这章中，我们会探索许多即经典又现代化的设计模式的js实现。</p><p>开发者都想知道是否有一个理想的模式或者模式集，它们能够用在它们的工作流程中。这个问题没有唯一的答案；我们从事的每个脚本和应用程序可能都有自己独特的需求，而且我们需要思考模式在哪里可以为实现提供真正的价值。</p><p>例如，一些项目可能从观察者模式提供的解耦好处中获得收益（模式减少应用各部分之间与另外部分之间的依赖），尽管其他项目可能太小，没有解耦的必要。</p><p>就是说，一旦我们对设计模式问题有了充分把握以及它们最合适的特定问题，将他集成到我们的应用程序架构中，会变得非常容易。</p><p>这章，我们将探索的模式有：</p><ul><li>构造器模式</li><li>模块模式</li><li>揭示模块模式</li><li>单例模式</li><li>观察者模式</li><li>中介者模式</li><li>原型模式</li><li>命令模式</li><li>门面模式</li><li>工厂模式</li><li>混合模式</li><li>装饰者模式</li><li>享元模式</li></ul><p>构造器模式</p><p>在经典的面向对象编程语言中，一个构造器是一个特殊的方法，用于为新创建的对象分配内存后初始化它。js中，因为几乎一切都是对象，我们经常最感兴趣的是对象构造器。</p><p>对像构造器用于创建特定的对象类型。准备使用的对象和接受的参数，对象第一次创建时，构造函数用来设置成员属性和方法的值。</p><h2 id="对象创建" tabindex="-1"><a class="header-anchor" href="#对象创建"><span>对象创建</span></a></h2><p>js中，创建新对象的三种共同方式。如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Each of the following options will create a new empty object:</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> newObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line"><span class="token keyword">var</span> newObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line"><span class="token keyword">var</span> newObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中最后案例中的，<code>Object</code>构造函数创建一个特定值的对象包装器，或者其中没有传值，它将创建一个空对象以及返回它。</p><p>之后，有四种键和值都赋给对象的方式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// ECMAScript 3 compatible approaches</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// 1. Dot syntax</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Set properties</span></span>
<span class="line">newObject<span class="token punctuation">.</span>someKey <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Get properties</span></span>
<span class="line"><span class="token keyword">var</span> value <span class="token operator">=</span> newObject<span class="token punctuation">.</span>someKey<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// 2. Square bracket syntax</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Set properties</span></span>
<span class="line">newObject<span class="token punctuation">[</span><span class="token string">&quot;someKey&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Get properties</span></span>
<span class="line"><span class="token keyword">var</span> value <span class="token operator">=</span> newObject<span class="token punctuation">[</span><span class="token string">&quot;someKey&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// ECMAScript 5 only compatible approaches</span></span>
<span class="line"><span class="token comment">// For more information see: http://kangax.github.com/es5-compat-table/</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// 3. Object.defineProperty</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Set properties</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span> newObject<span class="token punctuation">,</span> <span class="token string">&quot;someKey&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;for more control of the property&#39;s behavior&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// If the above feels a little difficult to read, a short-hand could</span></span>
<span class="line"><span class="token comment">// be written as follows:</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">defineProp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> value<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> config <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// To use, we then create a new empty &quot;person&quot; object</span></span>
<span class="line"><span class="token keyword">var</span> person <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Populate the object with properties</span></span>
<span class="line"><span class="token function">defineProp</span><span class="token punctuation">(</span> person<span class="token punctuation">,</span> <span class="token string">&quot;car&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Delorean&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">defineProp</span><span class="token punctuation">(</span> person<span class="token punctuation">,</span> <span class="token string">&quot;dateOfBirth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1981&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">defineProp</span><span class="token punctuation">(</span> person<span class="token punctuation">,</span> <span class="token string">&quot;hasBeard&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Outputs: Object {car: &quot;Delorean&quot;, dateOfBirth: &quot;1981&quot;, hasBeard: false}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// 4. Object.defineProperties</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Set properties</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span> newObject<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token string-property property">&quot;someKey&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token string-property property">&quot;anotherKey&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;Foo bar&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Getting properties for 3. and 4. can be done using any of the</span></span>
<span class="line"><span class="token comment">// options in 1. and 2.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这本书中，我们会看到一点，这些方法甚至可以被用于继承，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Usage:</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Create a race car driver that inherits from the person object</span></span>
<span class="line"><span class="token keyword">var</span> driver <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> person <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Set some properties for the driver</span></span>
<span class="line"><span class="token function">defineProp</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token string">&quot;topSpeed&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;100mph&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Get an inherited property (1981)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> driver<span class="token punctuation">.</span>dateOfBirth <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Get the property we set (100mph)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> driver<span class="token punctuation">.</span>topSpeed <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基础的构造器</p><p>像我们之前看到的，js不支持类的概念，但是它支持与对象一起工作的，特殊构造器函数。只需要在构造函数的调用前加上一个关键字，我们告诉js,我们想函数的行为像构造器，以及通过函数实例化有成员的新对象。</p><p>构造器内部，关键字this引用被创建的新对象，重新访问对象创建，一个基础的构造器可能看起来像这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> year<span class="token punctuation">,</span> miles</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>miles <span class="token operator">=</span> miles<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">+</span> <span class="token string">&quot; has done &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>miles <span class="token operator">+</span> <span class="token string">&quot; miles&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Usage:</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// We can create new instances of the car</span></span>
<span class="line"><span class="token keyword">var</span> civic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span> <span class="token string">&quot;Honda Civic&quot;</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">,</span> <span class="token number">20000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> mondeo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span> <span class="token string">&quot;Ford Mondeo&quot;</span><span class="token punctuation">,</span> <span class="token number">2010</span><span class="token punctuation">,</span> <span class="token number">5000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// and then open our browser console to view the</span></span>
<span class="line"><span class="token comment">// output of the toString() method being called on</span></span>
<span class="line"><span class="token comment">// these objects</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> civic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> mondeo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个构造器模式的简单版本，但是存在一些问题。一个是它让继承很困难，另一个是像toString()这样的函数要为每个使用Car构造函数创建的的新对象重新定义，者是非常不理想的，因为，理想情况下，函数应该在Car类型的实例之间共享。</p><p>感谢地，因为有许多es3和es5兼容的替代品来构建对象，围绕这个限制工作是微不足道的。</p><h2 id="带有原型的构造器" tabindex="-1"><a class="header-anchor" href="#带有原型的构造器"><span>带有原型的构造器</span></a></h2><p>函数，就像js中的几乎所有对像一样。包含一个原型对象。我们调用一个js构造器来创建对象时，所有的构造器原型属性在新对象上可以获取到。照这样，能创建多个Car对象，它们可以访问一样的原型。因此，我们扩展原始案例，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> year<span class="token punctuation">,</span> miles</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>miles <span class="token operator">=</span> miles<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Note here that we are using Object.prototype.newMethod rather than</span></span>
<span class="line"><span class="token comment">// Object.prototype so as to avoid redefining the prototype object</span></span>
<span class="line"><span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">+</span> <span class="token string">&quot; has done &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>miles <span class="token operator">+</span> <span class="token string">&quot; miles&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Usage:</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> civic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span> <span class="token string">&quot;Honda Civic&quot;</span><span class="token punctuation">,</span> <span class="token number">2009</span><span class="token punctuation">,</span> <span class="token number">20000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> mondeo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span> <span class="token string">&quot;Ford Mondeo&quot;</span><span class="token punctuation">,</span> <span class="token number">2010</span><span class="token punctuation">,</span> <span class="token number">5000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> civic<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> mondeo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，上面，toString()的单个实例在所有的Car对象之间共享。</p>`,27)]))}const i=s(t,[["render",l]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1%E6%9E%84%E9%80%A0%E5%99%A8%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":15,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"7ce14b0f4fcf5e4ca3f6628a3107f4414b5d4250","time":1607772279000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"2588ecbf370e3d7565203fdf3c6bc1dd9b7b343f","time":1598440472000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"算法+英语："},{"hash":"f84f48ca2b46b48d67e6442134732dd42c11a116","time":1597766382000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"jacascript"},{"hash":"b5bfb66219bb9504b28f6e7874430cdf50311d19","time":1597590917000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"19e9eb18c66100cfc59e853a51f91f7efd0f5f12","time":1596989722000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/1构造器模式.md"}');export{i as comp,u as data};
