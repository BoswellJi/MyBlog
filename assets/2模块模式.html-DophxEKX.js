import{_ as s,c as a,b as p,o as e}from"./app-B56A7WC8.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><p>模块是任何健壮的应用程序架构的组成部分，而且通常有助于保持项目代码单元的清晰分离和组织。</p><p>在js中，又几个实现模块的选项，这些包括：</p><ol><li>模块模式</li><li>对象字面量概念</li><li>amd 模块</li><li>commonjs 模块</li><li>ecmascript和谐模块</li></ol><p>我们之后在本书的现代化模块化js设计模式章节探索最后三个选项。</p><p>模块模式某种程度上是基于对象字面量的，因此有必要刷新一下对它们的认识。</p><h2 id="对象字面量" tabindex="-1"><a class="header-anchor" href="#对象字面量"><span>对象字面量</span></a></h2><p>在对像字面量表示法中，一个对象被描述为关闭在花括号中逗号分隔，名/值对的集合。对像中的名称可能是字符串，也可能是后跟冒号的标识符。对象中，最有一对名/值对后面，不应该又逗号，因为可能导致错误。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> myObjectLiteral <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token literal-property property">variableKey</span><span class="token operator">:</span> variableValue<span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">functionKey</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象字面量不需要使用new操作符来实例化，但是不能被使用在语句的开始，因为开头的花括号可能被解释为一个语句块的开始。对象之外，新的成员使用像<code>a.b=c</code>的赋值来添加。</p><p>下面，我们会看到一个使用对象字面量表达式的更完整的模块定义：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token literal-property property">myProperty</span><span class="token operator">:</span> <span class="token string">&quot;someValue&quot;</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// object literals can contain properties and methods.</span></span>
<span class="line">  <span class="token comment">// e.g we can define a further object for module configuration:</span></span>
<span class="line">  <span class="token literal-property property">myConfig</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">useCaching</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">&quot;en&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// a very basic method</span></span>
<span class="line">  <span class="token function-variable function">saySomething</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Where in the world is Paul Irish today?&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// output a value based on the current configuration</span></span>
<span class="line">  <span class="token function-variable function">reportMyConfig</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Caching is: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myConfig<span class="token punctuation">.</span>useCaching <span class="token operator">?</span> <span class="token string">&quot;enabled&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;disabled&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// override the current configuration</span></span>
<span class="line">  <span class="token function-variable function">updateMyConfig</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">newConfig</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> newConfig <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>myConfig <span class="token operator">=</span> newConfig<span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myConfig<span class="token punctuation">.</span>language <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: Where in the world is Paul Irish today?</span></span>
<span class="line">myModule<span class="token punctuation">.</span><span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: Caching is: enabled</span></span>
<span class="line">myModule<span class="token punctuation">.</span><span class="token function">reportMyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: fr</span></span>
<span class="line">myModule<span class="token punctuation">.</span><span class="token function">updateMyConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token string">&quot;fr&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">useCaching</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: Caching is: disabled</span></span>
<span class="line">myModule<span class="token punctuation">.</span><span class="token function">reportMyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用对象字面量能够帮助封装和组织你的代码，还有Rebecca Murphey之前写过关于这个话题的深度文章，你应该想要进一步阅读对象字面量。</p><p>那就是说，如果你选择这个技术，我们获取同样对模块模式感兴趣。它仍然使用对象字面量，只是只把它作为作用域函数的返回值。</p><h2 id="模块模式" tabindex="-1"><a class="header-anchor" href="#模块模式"><span>模块模式</span></a></h2><p>起初，在传统软件工程中，模块模式被定义为提供类的私有和共有封装的方式。</p><p>js中，用这种方式，模块模式被进一步用来模拟类的概念，我们能够包含共有/私有方法和变量在单个对象中，以此来保护全局作用域中的特定部分。这个导致我们函数名与其他定义在页面中的额外的脚本函数冲突的可能性。</p><h2 id="隐私" tabindex="-1"><a class="header-anchor" href="#隐私"><span>隐私</span></a></h2><p>模块模式封装隐私，状态并且使用闭包组织。它提供了一种包裹共有，私有方法和变量的混合，保护片段不泄露到全局作用域以及不小心与另一个开发者的接口发生碰撞。使用这个模式，只有一个公共api返回，保持闭包中的其他一切都是私有的。</p><p>这给我们繁重工作的保护逻辑一个整洁的解决方案，虽然只暴露我们想要应用其他部分使用的接口。模式利用一个立即调用函数表达式（看命名空间模式章节了解更多），从其中返回一个对象。</p><p>应该要知道，因为不像许多传统语言,js内部是没有明确的隐私概念，它没有访问修饰符。技术上，变量不能被定义为共有或者私有，所以我们是使用函数来模拟这个概念。模块模式中，模块模式中，变量和方法的定义只有在模块自生内部可获取，这幸亏有闭包。返回对象里面的变量或者方法，对于每个人来说，无论如何都是可以获取的。</p><h2 id="历史" tabindex="-1"><a class="header-anchor" href="#历史"><span>历史</span></a></h2><p>从历史的角度看，最初，2003年，模块模式由包含Richard Cornford 在内的许多人开发的。之后，由Douglas Crockford在他的讲座中推广。令一件琐碎的事情是如果你曾经使用过Yahoo的YUI库，它的一些特定可能相当熟悉，理由是，创建它们的组件时，模块模式对YUI有强烈的影响。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><p>让我们从创建的自包含模块中，开始看看模块模式的实现，</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> testModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">incrementCounter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> counter<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">resetCounter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;counter value prior to reset: &quot;</span> <span class="token operator">+</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Usage:</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Increment our counter</span></span>
<span class="line">testModule<span class="token punctuation">.</span><span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Check the counter value and reset</span></span>
<span class="line"><span class="token comment">// Outputs: counter value prior to reset: 1</span></span>
<span class="line">testModule<span class="token punctuation">.</span><span class="token function">resetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，其他部分代码不能直接从incrementCounter()或者resetCounter()中读取值。变量counter完全从我们的全局作用域屏蔽，所以，它的行为就像私有变量。它的存在被限制在模块的闭包中，这样只有我们的两个函数代码能够访问到它的作用域。我们的方法是有效的命名空间，所以在我们代码的测试章节，我们需要在任何调用前加上模块名称。</p><p>使用模块模式时，我们可能发现，定义简单的模板是有用的，我们从它开始。这里是涉及名称空间，公共，私有变量的模板。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> myNamespace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> myPrivateVar<span class="token punctuation">,</span> myPrivateMethod<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// A private counter variable</span></span>
<span class="line">  myPrivateVar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// A private function which logs any arguments</span></span>
<span class="line">  <span class="token function-variable function">myPrivateMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">foo</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// A public variable</span></span>
<span class="line">    <span class="token literal-property property">myPublicVar</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// A public function utilizing privates</span></span>
<span class="line">    <span class="token function-variable function">myPublicFunction</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">bar</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token comment">// Increment our private counter</span></span>
<span class="line">      myPrivateVar<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token comment">// Call our private method using bar</span></span>
<span class="line">      <span class="token function">myPrivateMethod</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看另一个案例，下面我们会看到使用这个模式实现的购物篮。模块自身完全自包含在一个叫做baseketModule的全局变量中。模块中的basket数组保持私有，所以我们应用的其他部分不能够直接读取它。它只在模块的闭包中存在，所以唯一能够访问它的方法是那些能够访问它的作用域的方法（例如：addItem(),getItemCount()等）。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> basketModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// privates</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> basket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">doSomethingPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">doSomethingElsePrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// Return an object exposed to the public</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Add items to our basket</span></span>
<span class="line">    <span class="token function-variable function">addItem</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">values</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      basket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Get the count of items in the basket</span></span>
<span class="line">    <span class="token function-variable function">getItemCount</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> basket<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Public alias to a private function</span></span>
<span class="line">    <span class="token literal-property property">doSomething</span><span class="token operator">:</span> doSomethingPrivate<span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Get the total value of items in the basket</span></span>
<span class="line">    <span class="token function-variable function">getTotal</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        p <span class="token operator">+=</span> basket<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">return</span> p<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模块内部，你可能注意到我们返回一个对象。这个自动赋值给basketModule，这样我们可以像下面一样跟它交互：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// basketModule returns an object with a public API we can use</span></span>
<span class="line"> </span>
<span class="line">basketModule<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token string">&quot;bread&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">0.5</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">basketModule<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token string">&quot;butter&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">0.3</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: 2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> basketModule<span class="token punctuation">.</span><span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: 0.8</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> basketModule<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// However, the following will not work:</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Outputs: undefined</span></span>
<span class="line"><span class="token comment">// This is because the basket itself is not exposed as a part of our</span></span>
<span class="line"><span class="token comment">// public API</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> basketModule<span class="token punctuation">.</span>basket <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// This also won&#39;t work as it only exists within the scope of our</span></span>
<span class="line"><span class="token comment">// basketModule closure, but not in the returned public object</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> basket <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>basetModule内部，上面的方法是有效的名称空间。</p><p>注意，上面的baseket模块的作用域函数被我们的函数包裹，之后，我们调用并理解存储它的返回值。这有大量优点，包括：</p><ol><li><p>自由的使用私有函数和私有成员，它们只能在我们的模块中消费。</p></li><li><p>假设函数是正常声明和命名的，我们试图发现哪个函数扔出异常时，在调试中很容易展示调用栈。</p></li><li><p>像T.J Crowder过去指出的，它还能够根据环境返回不同的函数。过去，我看过开发者为了在针对ie的模块中提供代码路径而使用这个模式来执行ua测试，但是我们很容易选择特定检测来达到这个相似的目的，那段时间。</p></li></ol><h2 id="模块模式变体" tabindex="-1"><a class="header-anchor" href="#模块模式变体"><span>模块模式变体</span></a></h2><h2 id="导入混合" tabindex="-1"><a class="header-anchor" href="#导入混合"><span>导入混合</span></a></h2><p>这个模式的变体演示了目标如何像参数一样传递给我们的模块的匿名函数。这个效果允许我们导入它们，并且使用我们想要的本地别名。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Global module</span></span>
<span class="line"><span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">jQ<span class="token punctuation">,</span> _</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">privateMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">jQ</span><span class="token punctuation">(</span><span class="token string">&quot;.container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">privateMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> _<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">publicMethod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">privateMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Pull in jQuery and Underscore</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> jQuery<span class="token punctuation">,</span> _ <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">myModule<span class="token punctuation">.</span><span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="导出" tabindex="-1"><a class="header-anchor" href="#导出"><span>导出</span></a></h2><p>下一个变体允许我们定义全局，而不会消费它们，而且相似的支持在上个案例中看到过的全局导入概念。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Global module</span></span>
<span class="line"><span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// Module object</span></span>
<span class="line">  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    privateVariable <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  module<span class="token punctuation">.</span>publicProperty <span class="token operator">=</span> <span class="token string">&quot;Foobar&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  module<span class="token punctuation">.</span><span class="token function-variable function">publicMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> privateVariable <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> module<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工具集和特定框架的模块模式实现</p><h2 id="dojo" tabindex="-1"><a class="header-anchor" href="#dojo"><span>Dojo</span></a></h2><p>Dojo提供了一个与对象一起工作统一方法，称为dojo.setObject()。它的第一个参数是一个点分隔的字符串，<code>myObj.parent.child</code>,它称在myObj内部定义的<code>parent</code>对象中属性为<code>child</code>。使用<code>setObject()</code>允许我们设置子类的值，在所传递路径的其余部分中创建任何中间对象（如果它们不存在）。</p><p>例如，我们想要定义baseket.core作为store名称空间的对象，这个能够使用传统方式来完成，像下面一样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> store <span class="token operator">=</span> window<span class="token punctuation">.</span>store <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>store<span class="token punctuation">[</span><span class="token string">&quot;basket&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span>basket <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>store<span class="token punctuation">.</span>basket<span class="token punctuation">[</span><span class="token string">&quot;core&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  store<span class="token punctuation">.</span>basket<span class="token punctuation">.</span>core <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">store<span class="token punctuation">.</span>basket<span class="token punctuation">.</span>core <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...rest of our logic</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者如下使用Dojo1.7和以上</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;dojo/_base/customStore&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">store</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// using dojo.setObject()</span></span>
<span class="line">  store<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span> <span class="token string">&quot;basket.core&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">var</span> basket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function-variable function">publicMethod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                  <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关dojo.setObject()更多信息，看官方文档。</p><p>ExtJs</p><p>使用Sencha的extjs的这些，一个演示如何正确在框架里使用模块模式的案例能够在下面找到。</p><p>这里，我们看到一个如何定义命名空间的案例，之后，它在包含私有共有api的模块中流行。除了一些语义的不同，它相当接近用原生js实现的模块模式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// create namespace</span></span>
<span class="line">Ext<span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span><span class="token string">&quot;myNameSpace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// create application</span></span>
<span class="line">myNameSpace<span class="token punctuation">.</span><span class="token function-variable function">app</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// do NOT access DOM from here; elements don&#39;t exist yet</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// private variables</span></span>
<span class="line">  <span class="token keyword">var</span> btn1<span class="token punctuation">,</span></span>
<span class="line">      privVar1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// private functions</span></span>
<span class="line">  <span class="token keyword">var</span> <span class="token function-variable function">btn1Handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">button<span class="token punctuation">,</span> event</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;privVar1=&quot;</span> <span class="token operator">+</span> privVar1 <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;this.btn1Text=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btn1Text <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// public space</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// public properties, e.g. strings to translate</span></span>
<span class="line">    <span class="token literal-property property">btn1Text</span><span class="token operator">:</span> <span class="token string">&quot;Button 1&quot;</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// public methods</span></span>
<span class="line">    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span> Ext<span class="token punctuation">.</span>Ext2 <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">        btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ext<span class="token punctuation">.</span>Button</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">renderTo</span><span class="token operator">:</span> <span class="token string">&quot;btn1-ct&quot;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btn1Text<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">handler</span><span class="token operator">:</span> btn1Handler</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">        btn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ext<span class="token punctuation">.</span>Button</span><span class="token punctuation">(</span> <span class="token string">&quot;btn1-ct&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btn1Text<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">handler</span><span class="token operator">:</span> btn1Handler</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>YUI</p><p>相似地，使用YUI3构建应用程序时，我们还能实现模块模式。下面的案例是由Eric Miraglia的原始YUI模块模式实现，但再一次，与普通的js版本没有太大的不同：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token constant">Y</span><span class="token punctuation">.</span><span class="token function">namespace</span><span class="token punctuation">(</span> <span class="token string">&quot;store.basket&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token constant">Y</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>basket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">var</span> myPrivateVar<span class="token punctuation">,</span> myPrivateMethod<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// private variables:</span></span>
<span class="line">    myPrivateVar <span class="token operator">=</span> <span class="token string">&quot;I can be accessed only within Y.store.basket.&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// private method:</span></span>
<span class="line">    <span class="token function-variable function">myPrivateMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">Y</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;I can be accessed only from within YAHOO.store.basket&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">myPublicProperty</span><span class="token operator">:</span> <span class="token string">&quot;I&#39;m a public property.&quot;</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">        <span class="token function-variable function">myPublicMethod</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token constant">Y</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;I&#39;m a public method.&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">// Within basket, I can access &quot;private&quot; vars and methods:</span></span>
<span class="line">            <span class="token constant">Y</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myPrivateVar <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token constant">Y</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">myPrivateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">            <span class="token comment">// The native scope of myPublicMethod is store so we can</span></span>
<span class="line">            <span class="token comment">// access public members using &quot;this&quot;:</span></span>
<span class="line">            <span class="token constant">Y</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myPublicProperty <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery"><span>jQuery</span></a></h2><p>有许多方式可以将不特定于插件的jquery代码封装到模块模式中。Ben Cherry之前推荐一个实现，其中围绕模块定义的函数包裹器在模块之间存在许多共同特性的事件中使用。</p><p>在下面案例中，定义了一个<code>library</code>函数，它定义了一个新库以及自动绑定到<code>init</code>函数到<code>document.ready</code>函数中，在新库被创建时。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">library</span><span class="token punctuation">(</span> <span class="token parameter">module</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function">$</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> module<span class="token punctuation">.</span>init <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      module<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> module<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">var</span> myLibrary <span class="token operator">=</span> <span class="token function">library</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// module implementation</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><p>我们看过了构造器模式为什么能够有用，但是为什么模块模式是一个好选择？对于新手，对于来自面向对象背景的开发者来说更加整洁比真正封装的思想。至少从js视角。</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><p>模块模式的缺点是因为我们访问公共成员和私有成员的方式不同，我们希望改变可见性时，我们事实上因该改变使用会员的每个地方。</p><p>在方法中，我们还不能访问私有成员，之后它被添加到对象。那是说，在许多案例中，模块模式仍然相当有用，在正确使用时，当然有改善我们应用程序结构的潜力。</p><p>其他缺点包含没有给私有成员创建自动单元测试的能力和当bug需要热修复时的，额外复杂度。不能简单弥补私有成员。相反地，必须覆盖所有与有bug的privates交互的公共方法。开发者也不能轻松扩展privates，所以指得记住的是privates并不像它们最初看起来那样灵活。</p><p>要想进一步阅读模块模式，看Ben Cherry的优秀的深度文章。</p><h2 id="揭示模块模式" tabindex="-1"><a class="header-anchor" href="#揭示模块模式"><span>揭示模块模式</span></a></h2><p>既然我们更熟悉模块模式，让我们看看稍微改善过的版本，Christian Heilmann的揭示模块模式。</p><p>当我们想要从另一个公共方法中调用一个公共方法或访问公共变量时，Heilmann不得不重复主对象的名字，这让他感到沮丧，这个揭示模块模式出现了。他还讨厌模块模式不得不切换对象字面量符号给他想要公共的事情。</p><p>他努力的结果是一个升级的模式，其中我们简化了所有函数的定义以及私有作用域变量以及返回一个指向私有功能的匿名对象，我们希望揭示公开。</p><p>一个如何使用揭示模块模式的案例能够在下面找到：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> myRevealingModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">var</span> privateVar <span class="token operator">=</span> <span class="token string">&quot;Ben Cherry&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            publicVar <span class="token operator">=</span> <span class="token string">&quot;Hey there!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;Name:&quot;</span> <span class="token operator">+</span> privateVar <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">publicSetName</span><span class="token punctuation">(</span> <span class="token parameter">strName</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            privateVar <span class="token operator">=</span> strName<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">publicGetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">        <span class="token comment">// Reveal public pointers to</span></span>
<span class="line">        <span class="token comment">// private functions and properties</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">setName</span><span class="token operator">:</span> publicSetName<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">greeting</span><span class="token operator">:</span> publicVar<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">getName</span><span class="token operator">:</span> publicGetName</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">myRevealingModule<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span> <span class="token string">&quot;Paul Kinlan&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们喜欢，这个模式常常用来使用一个更具体地命名方案来揭示私有函数和属性：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> myRevealingModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">var</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            privateCounter<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">publicFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">publicIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">publicIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">privateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">publicGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> privateCounter<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">// Reveal public pointers to</span></span>
<span class="line">        <span class="token comment">// private functions and properties</span></span>
<span class="line"> </span>
<span class="line">       <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">start</span><span class="token operator">:</span> publicFunction<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">increment</span><span class="token operator">:</span> publicIncrement<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">count</span><span class="token operator">:</span> publicGetCount</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">myRevealingModule<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h2><p>这个模式允许我们脚本地语法更加一致。在模块地最后还让他更清晰，我们的函数和变量公开访问的可读性会被降低在其中。</p><h2 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h2><p>模式的却带你是如果私有函数涉及公共函数，如果要修补，公开函数不能被重写。这个是因为私有函数将继续涉及私有实现，而且模式不能应用到公开成员上，只能应用在函数上。</p><p>引用私有变量的公共对象成员还是上面非补丁笔记的主体。</p><p>因此，使用揭示模块模式创建的模块肯可能比那些原始模块模式创建的模块更加脆弱，所以使用期间需要小心。</p>`,83)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2%E6%A8%A1%E5%9D%97%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":15,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"21a984d8237cbb94179c1235309f687e4da9f16e","time":1608203842000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: 命令模式"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"2588ecbf370e3d7565203fdf3c6bc1dd9b7b343f","time":1598440472000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"算法+英语："},{"hash":"f84f48ca2b46b48d67e6442134732dd42c11a116","time":1597766382000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"jacascript"},{"hash":"b5bfb66219bb9504b28f6e7874430cdf50311d19","time":1597590917000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"19e9eb18c66100cfc59e853a51f91f7efd0f5f12","time":1596989722000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/2模块模式.md"}');export{o as comp,u as data};
