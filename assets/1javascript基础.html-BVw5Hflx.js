import{_ as n,c as a,b as e,o as l}from"./app-B56A7WC8.js";const p={};function i(c,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>这部分是一个自包含的js快速介绍。你不需要阅读这本书的任何其他内容就能理解它，并且，数中没有其他部分依赖它的概念。但是，在&#39;Tips for Reading This book&#39;中应用了如何阅读这本书的技巧。</p><p>这章是关于基础js的，我给js子集选择的名字，是尽可能的简洁同时又让你能有收获。当你开始学习js的时候，我推荐前进到语言剩余部分之前，等一等在编程。那样，你可能会困惑不能立刻学习每件事情。</p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><ul><li>javascript(js) vs ecmascript(es)</li></ul><p>ecmascript是js的官方名字。因为js有商标（原始持有的是Sun, 现在是Oracle），所以一个新的名字变得很要紧。当时，Mozilla是几个允许官方使用js名字的公司之一，因为它很久以前接受一个许可证。对于一般的使用，这些规则需要遵循：</p><ol><li>js意思是编程语言</li><li>ecmascript是被语言规范使用的名称。因此，无论什么时候涉及到语言的版本，人们都说的是ecmascript。当前的js版本是ecmascript5;es6正在开发当中。</li></ol><ul><li>语言的影响和本质</li></ul><p>js的创始人，Brendan Eich没有选择，所以非常快速的创建了语言（）。他从几种编程语言中借鉴：java(语法，原始值vs对象)，scheme和awk(函数为一等公民)，self(原型继承)，以及perl和python（字符串，数组，和正在表达式）。 直到es3js才有异常处理，这解释了为什么语言常常自动转换值以及常常静默失败，因为他初始化不能抛异常。 一方面，js怪异，还缺失相当多的功能（块级作用域变量，模块，子类支持，等等），另一方面，它有几个允许你围绕这些问题工作的强有力的特性。在其他语言中，你学习语言特性，但在js中，你反而经常学习模式。 鉴于它的影响，js开启了一种函数式编程（高级函数；内置map, reduce, 等等）和面向对象编程（对象，继承）的混合的编程风格。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><p>这章解释基础的js语法原则。</p><ul><li>语法概述</li></ul><p>几个语法案例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Two slashes start single-line comments</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// declaring a variable</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">// assigning a value to the variable \`x\`</span></span>
<span class="line"></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calling function \`foo\` with parameters \`x\` and \`y\`</span></span>
<span class="line">obj<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// calling method \`bar\` of object \`obj\`</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A conditional statement</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Is \`x\` equal to zero?</span></span>
<span class="line">    x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Defining function \`baz\` with parameters \`a\` and \`b\`</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意等号的两种不同用法：</p><ol><li>单个等号被用于变量的赋值</li><li>三个等号被用于比较两个值</li></ol><ul><li>声明vs表达式</li></ul><p>为了理解js的语法，你应该知道它有两种主要的语法分类：语句和表达式：</p><ol><li>语句做的事情，一个程序是语句的序列。这里是语句的案例，它定义了一个变量foo:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> foo<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>表达式产生值。它们是函数参数，赋值的右边，等等。这里是表达式的案例。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>语句和表达式之间区别最明显的是通过js有两种不同的做if-then-esle的方法-无论是语句：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">=</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">=</span> <span class="token operator">-</span>y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或是表达式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> y <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> y <span class="token operator">:</span> <span class="token operator">-</span>y<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你能使用后者作为函数参数，但是前者不能。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">myFunction</span><span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> y <span class="token operator">:</span> <span class="token operator">-</span>y<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最后，无论js哪里接收一个语句，你都可以使用表达式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>整行是一个语句（所谓的表达式语句），但是函数调用foo(7, 1)是表达式。</p><ul><li>分号</li></ul><p>在js中，分号是可选的。但是，我建议总是包含它们，因为否则js会猜错语句的结尾。在自动插入分号中，进行详细解释。</p><p>分号终止语句，单块不是。有一个案例，你会在一个块之后看到一个分号：一个函数表达式是结尾带有块的表达式。如果这样表达式在语句中谓语最后，它后面要跟上分号。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Pattern: var _ = ___;</span></span>
<span class="line"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// function expr. inside var decl.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注释</li></ul><p>js有两种注释：单行注释和多行注释。单行注释从 <code>//</code> 开始，并且被行尾终止：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// single-line comment</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>多行注释通过 <code>/*</code> 和 <code>*/</code> 来限制：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">/* This is</span>
<span class="line">   a multiline</span>
<span class="line">   comment.</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量和赋值" tabindex="-1"><a class="header-anchor" href="#变量和赋值"><span>变量和赋值</span></a></h2><p>js中的变量在它们使用之前定义：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> foo<span class="token punctuation">;</span> <span class="token comment">// declare variable \`foo\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>赋值</li></ul><p>你可以定义一个变量同时给他赋值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你还可以给已经存在的变量赋值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">foo <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// change variable \`foo\`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>复合赋值操作符</li></ul><p>有复合赋值运算符比如：+=。下面两份赋值是相等的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>标识符和变量名</li></ul><p>在js中，标识符是扮演各种句法角色的名称。例如，一个变量的名称是标识符。标识符是大小写敏感的。 粗略地，标识符的第一个字符可以是任何的unicode字母，一个$符号，或者一个下划线。随后的字符可以是任何unicode数字。因此，下面全都是合法标识符</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">arg0</span>
<span class="line">_tmp</span>
<span class="line">$elem</span>
<span class="line">π</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面标识符是保留字-它们是语法的一部分并且不能作为变量名使用（包含函数名和参数名）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">arguments</span>
<span class="line"></span>
<span class="line"><span class="token keyword">break</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">case</span></span>
<span class="line"></span>
<span class="line">catch</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">const</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">continue</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">debugger</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">default</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">delete</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">enum</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extends</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">false</span></span>
<span class="line"></span>
<span class="line">finally</span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">implements</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">import</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">in</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">instanceof</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">interface</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">new</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">null</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">package</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">super</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">this</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">throw</span></span>
<span class="line"></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的三个标识符不是保留字，但是你应该对待它们一样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token number">Infinity</span></span>
<span class="line"></span>
<span class="line"><span class="token number">NaN</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，你还因该与标准的全局变量名保持距离。你能够在局部变量中使用它们，这样不会破坏任何事情，但是你的代码仍然会变得混乱。</p><h2 id="值" tabindex="-1"><a class="header-anchor" href="#值"><span>值</span></a></h2><p>js有许多我们已经料到了的编程语言中的值：布尔值，数值，字符串，数组，和等等。js中的所有值都有属性。每一个属性有一个值。你可以认为属性像记录的字段。你使用 <code>.</code> 操作符来读取属性：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">value<span class="token punctuation">.</span>propKey</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，字符串&#39;abc&#39;有属性length:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token operator">&gt;</span></span>
<span class="line">str<span class="token punctuation">.</span>length</span>
<span class="line"><span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的代码还可以这样写：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span>length</span>
<span class="line"> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>点操作符还被用来给属性赋值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// empty object</span></span>
<span class="line"><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// create property \`foo\`, set it to 123</span></span>
<span class="line"><span class="token number">123</span></span>
<span class="line"><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>foo</span>
<span class="line"><span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及你可以使用它调用函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token string">&#39;HELLO&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的例子中，我们已经在值<code>hello</code>的toUpperCase()方法。</p><ul><li>原始值vs对象</li></ul><p>js在值之间，做了一些武断的区分：</p><ol><li>原始值是：布尔值，数字，字符串，null,和undefined</li><li>其他所有的值都是对象</li></ol><p>两者之间一个主要不同是如何比较它们；每一个对象有一个唯一标识符并且值等于它自己。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// an empty object</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// another empty object</span></span>
<span class="line"><span class="token operator">&gt;</span> obj1 <span class="token operator">===</span> obj2</span>
<span class="line"><span class="token boolean">false</span></span>
<span class="line"><span class="token operator">&gt;</span> obj1 <span class="token operator">===</span> obj1</span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于此相反：所有编码相同的原始值被认为是相同的。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> prim1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> prim2 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&gt;</span> prim1 <span class="token operator">===</span> prim2</span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面两章更细致的解释了原始值和对象。</p><ul><li>原始值</li></ul><p>下面都是原始值（或者简称为原始）：</p><ol><li>布尔值： true,false</li><li>数值：12，1.2</li><li>字符串：&#39;abc&#39;,&quot;abc&quot;</li><li>两个非值：undefined,null</li></ol><p>原始值有下面的特点：</p><ol><li>通过值比较：是内容的比较</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">3</span></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token string">&#39;abc&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>总是不可变的：属性不能被改变，增加或者删除</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&gt;</span> str<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// try to change property \`length\`</span></span>
<span class="line"><span class="token operator">&gt;</span> str<span class="token punctuation">.</span>length      <span class="token comment">// ⇒ no effect</span></span>
<span class="line"><span class="token number">3</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&gt;</span> str<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// try to create property \`foo\`</span></span>
<span class="line"><span class="token operator">&gt;</span> str<span class="token punctuation">.</span>foo      <span class="token comment">// ⇒ no effect, unknown property</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取一个未知的属性总是返回undefined</p><ul><li>对象</li></ul><p>所有的非原始值是对象。大部分一般类型的对象是：</p><ol><li>普通对象，通过对象字面量来创建：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Doe&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的对象有两个属性：属性<code>firstName</code>的值是&#39;Jane&#39;以及属性<code>lastName</code>的值是<code>Doe</code>.</p><ol start="2"><li>数组，通过数组字面量来创建：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">[</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cherry&#39;</span> <span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>前面的属性有能够通过数值索引来访问的三个元素。例如，<code>apple</code>的索引是<code>0</code>。</p><ol start="3"><li>正则表达式，通过正则表达式字面量创建：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a+b+$</span><span class="token regex-delimiter">/</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对象有下面的特点：</p><ol><li>通过引用比较：标识符比较，每个值有自己的标识：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// two different empty objects</span></span>
<span class="line"><span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&gt;</span> obj1 <span class="token operator">===</span> obj2</span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>默认可变的</li></ol><p>你通常可以自由改变，新增，以及删除属性。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// add property \`foo\`</span></span>
<span class="line"><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>foo</span>
<span class="line"><span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>undefined和null</li></ul><p>大部分编程语言有值来标识错误信息。js有两个这样的非值，undefined和null:</p><ol><li>undefined意思是无值</li></ol><p>非初始化变量是undefined:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> foo<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&gt;</span> foo</span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺失参数是undefined:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你读取一个不存在的属性，你得到undefined:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// empty object</span></span>
<span class="line"><span class="token operator">&gt;</span> obj<span class="token punctuation">.</span>foo</span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>null意思是无对象，它被作为一个非值使用，无论一个对象什么时候被期待（参数，对象链的最后，等等）</li></ol><p>警告：undefined和null没有属性，甚至都没有标准方法比如toString()</p><p>检查undefined或者null</p><p>函数通常允许你指定缺失的值，无论是通过undefined还是null。你可以通过显示检查来做相同的事情。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> x <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还能开发undefined和null两者都被认为false的事实：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>警告： false,0,NaN和&#39;&#39;也被认为成false.</p><ul><li>使用typeof和instanceof来给值分类</li></ul><p>有两个操作符用来给数组分类：typeof主要用于原始值，而instanceof用于对象。</p><p>typeof看起来像这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">typeof</span> value</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它返回一个描述值类型的字符串。这里是一些例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">typeof</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token string">&#39;boolean&#39;</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">typeof</span> <span class="token string">&#39;abc&#39;</span></span>
<span class="line"><span class="token string">&#39;string&#39;</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// empty object literal</span></span>
<span class="line"><span class="token string">&#39;object&#39;</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// empty array literal</span></span>
<span class="line"><span class="token string">&#39;object&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的表格列出了所有typeof的结果：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">undefined</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;undefined&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">null</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;object&#39;</span></span>
<span class="line"></span>
<span class="line">Boolean value</span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;boolean&#39;</span></span>
<span class="line"></span>
<span class="line">Number value</span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;number&#39;</span></span>
<span class="line"></span>
<span class="line">String value</span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;string&#39;</span></span>
<span class="line"></span>
<span class="line">Function</span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;function&#39;</span></span>
<span class="line"></span>
<span class="line">All other normal values</span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;object&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">(</span>Engine<span class="token operator">-</span>created value<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">JavaScript engines are allowed to create values <span class="token keyword">for</span> which <span class="token keyword">typeof</span> returns arbitrary <span class="token function">strings</span> <span class="token punctuation">(</span>different from all results listed <span class="token keyword">in</span> <span class="token keyword">this</span> table<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>typeof null 返回object,是一个不能修复的bug,因为它会破坏现有代码。它不意味着null是对象。</p><p>instanceof看起来像这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">value <span class="token keyword">instanceof</span> <span class="token class-name">Constr</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果值是一个通过构造函数Constr创建的对象，就返回true。这里是一些案例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// object created by constructor Bar</span></span>
<span class="line"><span class="token operator">&gt;</span> b <span class="token keyword">instanceof</span> <span class="token class-name">Bar</span></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>  <span class="token comment">// Array is a subconstructor of Object</span></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">undefined</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span></span>
<span class="line"><span class="token boolean">false</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span></span>
<span class="line"><span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值"><span>布尔值</span></a></h2><p>原始布尔类型有值true和false组成。下面的操作符生产布尔值。</p><ol><li>二进制逻辑操作符 &amp;&amp; ||</li><li>前缀逻辑操作符 !</li><li>比较操作符： <ul><li>等号操作符： === ， !==， !=</li><li>顺序操作符： &gt;, &gt;=, &lt;, &lt;=</li></ul></li></ol><ul><li>真值和假值</li><li>二进制逻辑操作符</li><li>等式操作符</li></ul><h2 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>数字</span></a></h2><h2 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h2><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><ul><li>字符串操作符</li><li>字符串方法</li></ul><h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句"><span>语句</span></a></h2><ul><li>条件</li><li>循环</li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><ul><li>函数定义被提升</li><li>特殊的变量arguments</li><li>太多或者太少arguments</li><li>可选参数</li><li>强制执行</li><li>转换argument为数组</li></ul><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><h2 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式"><span>严格模式</span></a></h2><h2 id="变量作用域和闭包" tabindex="-1"><a class="header-anchor" href="#变量作用域和闭包"><span>变量作用域和闭包</span></a></h2><p>在javascript中，你在使用变量之前通过var来定义它们，你可以使用一个单一的var声明，来定义和初始化几个变量。但是我推荐你给每个变量使用一个声明，（理由会在语法章节解释），所以，我会重写前面的声明。因为提升，通常定义变量最好的方式是在函数的开头。</p><ul><li>变量的函数作用域</li></ul><p>一个变量的作用域总是完整的函数（与当前块相反），我们能看到变量tmp没有被限制在开始行中的块作用域，直到函数结束它都存在。</p><ul><li>变量被提升</li></ul><p>每一个变量定义都被提升：定义被移动到函数开始的位置，但是不会给他赋值。</p><ul><li>闭包</li></ul><p>每个函数都与它周围函数的变量保持连接。甚至离开创建它的作用域。开始在行内的函数离开创建的上下文，但是对于start当前版本都是保持连接的。 <code>闭包是，一个函数加上它的周围作用域的变量连接</code> 。所以 <code>createIncrementor()</code> 返回一个闭包。</p><ul><li>立即执行函数表达式模式：引入一个新作用域</li></ul><p>有时，你想引入一个新的作用域，例如阻止一个变量成为全局变量。在javascript中，你不能使用块作用域做到这样，你必须使用一个函数。但是有一个在类块作用域方式中使用函数的模式，被称为立即执行函数表达式 <code>IIFE</code> 。确保之前输入的案例如实展示。除了注释。一个IIFE是一个你定义之后立即被调用的函数表达式。在函数内部，一个新的作用域存在，阻止tmp变量成为全局变量。</p><h2 id="对象和构造函数" tabindex="-1"><a class="header-anchor" href="#对象和构造函数"><span>对象和构造函数</span></a></h2><ul><li>单个对象</li><li>任意的属性键</li><li>提取方法</li><li>方法内部的函数</li><li>构造函数：对像的工厂</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><ul><li>数组字面量</li><li>数组方法</li><li>迭代数组</li></ul><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><p>js内置支持正则表达式。它们通过斜杠语法被限制。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^abc$</span><span class="token regex-delimiter">/</span></span></span>
<span class="line"><span class="token operator">/</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token operator">-</span>Za<span class="token operator">-</span>z0<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法test(): 是否有匹配</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token operator">&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a+b+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;aaab&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a+b+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法exec(): 匹配和捕获组</li><li>方法replace(): 搜索和替换</li></ul><h2 id="数学" tabindex="-1"><a class="header-anchor" href="#数学"><span>数学</span></a></h2><h2 id="标准库的其他功能" tabindex="-1"><a class="header-anchor" href="#标准库的其他功能"><span>标准库的其他功能</span></a></h2><p>js的标准库相当简朴，但是你能使用更多东西：</p><p>Date</p><p>JSON</p><p>console</p>`,174)]))}const o=n(p,[["render",i]]),r=JSON.parse('{"path":"/books/javascript/%E8%AF%9D%E8%AF%B4javascript/1%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8Bjavascript/1javascript%E5%9F%BA%E7%A1%80.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"5f6fa6844ec76e9b5411e3987c0c5e774099e121","time":1604314328000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"english: 定语从句"},{"hash":"89a18d0ad4de8a937a638dc3b7dbff99bfc94862","time":1604314328000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"english: 定语从句"},{"hash":"4af7402f3a28d13ed97a4634ddd01ebf0f56c3ba","time":1604142805000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"javascript:翻译"},{"hash":"52401445a70655ab4516abc9aceace99ca0c41d5","time":1604142805000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"javascript:翻译"}]},"filePathRelative":"books/javascript/话说javascript/1快速开始javascript/1javascript基础.md"}');export{o as comp,r as data};
