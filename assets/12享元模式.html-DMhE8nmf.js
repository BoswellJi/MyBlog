import{_ as s,c as a,b as p,o as t}from"./app-B56A7WC8.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<p>享元模式是一个经典的用来优化重复，慢的以及无效共享数据的代码的结构化解决方案。它致力于通过和相关对象共享尽可能多的数据来最小化应用中内存的使用。（例如：应用程序配置，状态等等）</p><p>起初，这个模式是1990年由paul和mark构思的还是以拳击重量等级命名的，这个等级包括提供低于112磅的拳击手。命名享元是从权重分类中衍生出来的，因为它指的是模式要帮助我们实现的小权重（内存占用）。</p><p>在实践中，享元数据共享能设计几个相似的数据或者数据构造由许多对象来使用，以及放置数据到单独外部对象。我们可以将此对象传递给依赖此数据的对象，而不是跨每个对象存储相同的数据。</p><h2 id="使用享元模式" tabindex="-1"><a class="header-anchor" href="#使用享元模式"><span>使用享元模式</span></a></h2><p>有两种享元模式被应用的方式。第一种是数据层，我们在其中处理存储在内存中大量的相似对象的数量之间共享数据的概念。</p><p>第二种是dom层，享元在其中能够被应用为中心化实践管理器来避免联和实践处理器到每个我们希望有一些相同行为的父容器中的子元素。</p><p>传统地，因为数据层应用享元模式是最多的，我们会首先看看：</p><h2 id="享元和共享的数据" tabindex="-1"><a class="header-anchor" href="#享元和共享的数据"><span>享元和共享的数据</span></a></h2><p>对于这个应用程序，有不少我们需要知道的关于经典享元模式的概念。在享元模式中，有两个状态的概念，内部的，外部的，我们对象的内部方法可能需要内部信息，没有它们绝对不能工作。但是外部信息能够被删除和存储在外部。</p><p>相同的内部数据对象能被工厂方法创建的单独共享对象替换。这允许我们减少整体大量存储的隐式数据的数量。</p><p>这样的好处是我们能够对已经被实例化的对象保持关注，以至于之前创建的新副本，从我们已经有的对象中区分出内部状态。</p><p>我们使用管理器来处理外部状态。如何实现这一点可能会有所不同，但是实现的一种方法是有包含一个中心化的外部状态数据库的管理对象而且它们都属于享元对象。</p><h2 id="实现经典享元" tabindex="-1"><a class="header-anchor" href="#实现经典享元"><span>实现经典享元</span></a></h2><p>因为近年来，享元模式没有在js中重度使用，我们可能使用许多实现来自java和c++世界。</p><p>我们首先要看看代码中的享元是来自维基百科享元模式的java案例的js实现。</p><p>我们将进行这个实现中享元组件的三种类型的用法，排列在下面：</p><ul><li>享元：对应到接口，通过接口，享元能够接受和对外部数据起作用。</li><li>具体的享元：实际地实现享元接口和存储内部的状态。具体的享元需要善于分享以及有维护外部状态的能力。</li><li>享元工厂：管理享元对象还要创建它们。</li></ul><h2 id="鸭冲实现" tabindex="-1"><a class="header-anchor" href="#鸭冲实现"><span>鸭冲实现</span></a></h2><p>鸭冲允许我们扩展语言或者解决方案的能力，而不必需要修改运行时源代码。因为下个解决方案需要使用java 关键字implements来实现接口，而且原生的js中是没有的，让我们第一次鸭冲它。</p><p>Function.prototype.implementsFor处理一个对象构造器还允许父类或者对象，不管继承是来自使用正常继承的（对于函数），还是虚拟继承（对于对象）。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Simulate pure virtual inheritance/&quot;implement&quot; keyword for JS</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">implementsFor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">parentClassOrObject</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> parentClassOrObject<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Normal Inheritance</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">parentClassOrObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>parent <span class="token operator">=</span> parentClassOrObject<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Pure Virtual Inheritance</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> parentClassOrObject<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>parent <span class="token operator">=</span> parentClassOrObject<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过函数显示的继承接口 我们能使用这个来补充这个implements关键字缺失。下面，CoffeeFlavor实现CoffeeOrder接口并且必须包含它的接口方法为我们分配驱动这些对象的实现的功能。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Flyweight object</span></span>
<span class="line"><span class="token keyword">var</span> CoffeeOrder <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// Interfaces</span></span>
<span class="line">  <span class="token function-variable function">serveCoffee</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getFlavor</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// ConcreteFlyweight object that creates ConcreteFlyweight</span></span>
<span class="line"><span class="token comment">// Implements CoffeeOrder</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CoffeeFlavor</span><span class="token punctuation">(</span> <span class="token parameter">newFlavor</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">var</span> flavor <span class="token operator">=</span> newFlavor<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// If an interface has been defined for a feature</span></span>
<span class="line">    <span class="token comment">// implement the feature</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getFlavor <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getFlavor</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> flavor<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serveCoffee <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">serveCoffee</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">context</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Serving Coffee flavor &quot;</span></span>
<span class="line">          <span class="token operator">+</span> flavor</span>
<span class="line">          <span class="token operator">+</span> <span class="token string">&quot; to table number &quot;</span></span>
<span class="line">          <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">getTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Implement interface for CoffeeOrder</span></span>
<span class="line">CoffeeFlavor<span class="token punctuation">.</span><span class="token function">implementsFor</span><span class="token punctuation">(</span> CoffeeOrder <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Handle table numbers for a coffee order</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CoffeeOrderContext</span><span class="token punctuation">(</span> <span class="token parameter">tableNumber</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">return</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function-variable function">getTable</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">return</span> tableNumber<span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">CoffeeFlavorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> flavors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">getCoffeeFlavor</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flavorName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">            <span class="token keyword">var</span> flavor <span class="token operator">=</span> flavors<span class="token punctuation">[</span>flavorName<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> flavor <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                flavor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeFlavor</span><span class="token punctuation">(</span>flavorName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                flavors<span class="token punctuation">[</span>flavorName<span class="token punctuation">]</span> <span class="token operator">=</span> flavor<span class="token punctuation">;</span></span>
<span class="line">                length<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> flavor<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">        <span class="token function-variable function">getTotalCoffeeFlavorsMade</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> length<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Sample usage:</span></span>
<span class="line"><span class="token comment">// testFlyweight()</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">testFlyweight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// The flavors ordered.</span></span>
<span class="line">  <span class="token keyword">var</span> flavors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// The tables for the orders.</span></span>
<span class="line">    tables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// Number of orders made</span></span>
<span class="line">    ordersMade <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// The CoffeeFlavorFactory instance</span></span>
<span class="line">    flavorFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeFlavorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">takeOrders</span><span class="token punctuation">(</span> <span class="token parameter">flavorIn<span class="token punctuation">,</span> table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     flavors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> flavorFactory<span class="token punctuation">.</span><span class="token function">getCoffeeFlavor</span><span class="token punctuation">(</span> flavorIn <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     tables<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeOrderContext</span><span class="token punctuation">(</span> table <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     ordersMade<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Cappuccino&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Cappuccino&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Frappe&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Frappe&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Xpresso&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Frappe&quot;</span><span class="token punctuation">,</span> <span class="token number">897</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Cappuccino&quot;</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Cappuccino&quot;</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Frappe&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Xpresso&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Cappuccino&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Xpresso&quot;</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Frappe&quot;</span><span class="token punctuation">,</span> <span class="token number">552</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Cappuccino&quot;</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token function">takeOrders</span><span class="token punctuation">(</span><span class="token string">&quot;Xpresso&quot;</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ordersMade<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       flavors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">serveCoffee</span><span class="token punctuation">(</span>tables<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line">   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;total CoffeeFlavor objects made: &quot;</span> <span class="token operator">+</span> flavorFactory<span class="token punctuation">.</span><span class="token function">getTotalCoffeeFlavorsMade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转换代码使用享元模式" tabindex="-1"><a class="header-anchor" href="#转换代码使用享元模式"><span>转换代码使用享元模式</span></a></h2><p>下一步，让我们继续看看享元，通过实现一个管理图书馆所有书的系统。每本书的重要元数据可能被分解为，如下：</p><p>ID Title Author Genre Page count Publisher ID ISBN</p><p>我们还需要下面的属性来保持对哪个成员已经查出指定书的追踪，它们已经借出的日期以及期望返还的日期。</p><p>checkoutDate checkoutMember dueReturnDate availability</p><p>因此，每本书被代表为，如下原先与任何使用享元模式的优化：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Book</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> genre<span class="token punctuation">,</span> pageCount<span class="token punctuation">,</span>publisherID<span class="token punctuation">,</span> <span class="token constant">ISBN</span><span class="token punctuation">,</span> checkoutDate<span class="token punctuation">,</span> checkoutMember<span class="token punctuation">,</span> dueReturnDate<span class="token punctuation">,</span>availability</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>genre <span class="token operator">=</span> genre<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>pageCount <span class="token operator">=</span> pageCount<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>publisherID <span class="token operator">=</span> publisherID<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ISBN</span> <span class="token operator">=</span> <span class="token constant">ISBN</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>checkoutDate <span class="token operator">=</span> checkoutDate<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>checkoutMember <span class="token operator">=</span> checkoutMember<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>dueReturnDate <span class="token operator">=</span> dueReturnDate<span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">this</span><span class="token punctuation">.</span>availability <span class="token operator">=</span> availability<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token class-name">Book</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">getTitle</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">getAuthor</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">getISBN</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ISBN</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token comment">// For brevity, other getters are not shown</span></span>
<span class="line">  <span class="token function-variable function">updateCheckoutStatus</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">bookID<span class="token punctuation">,</span> newStatus<span class="token punctuation">,</span> checkoutDate<span class="token punctuation">,</span> checkoutMember<span class="token punctuation">,</span> newReturnDate</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> bookID<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>availability <span class="token operator">=</span> newStatus<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>checkoutDate <span class="token operator">=</span> checkoutDate<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>checkoutMember <span class="token operator">=</span> checkoutMember<span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span>dueReturnDate <span class="token operator">=</span> newReturnDate<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">extendCheckoutPeriod</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">bookID<span class="token punctuation">,</span> newReturnDate</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> bookID<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>dueReturnDate <span class="token operator">=</span> newReturnDate<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">isPastDue</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">bookID</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">     <span class="token keyword">var</span> currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token keyword">return</span> currentDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dueReturnDate <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一开始，对于少量的书，这个可能工作的很好，但是当图书馆扩展到包含大量多个版本以及会有每本书的副本时，我们可能会发现，随着时间，管理系统会运行的越来越慢。使用上千个书对象能够压垮可获得的内存，但是我们能使用享元模式来改善这个问题优化我们的系统。</p><p>现在，我们分割我们的数据到内部和外部状态，如下：书对象相关的数据时内部的，而检验数据被认为是外部数据。这仍然有相当大的对象数量，但是显著地比我们之前更少。</p><p>下面的我们书元数据结合的单例会在所有带有特定标题的书的副本之间共享。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Flyweight optimized version</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">Book</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> genre<span class="token punctuation">,</span> pageCount<span class="token punctuation">,</span> publisherID<span class="token punctuation">,</span> <span class="token constant">ISBN</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>genre <span class="token operator">=</span> genre<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>pageCount <span class="token operator">=</span> pageCount<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>publisherID <span class="token operator">=</span> publisherID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ISBN</span> <span class="token operator">=</span> <span class="token constant">ISBN</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像我们看到的，外部状态已经被移除了。图书馆检查的每件事情会移动到管理器而且现在作为对象数据被分割，工厂能够被用在实例化。</p><h2 id="一个基础工厂" tabindex="-1"><a class="header-anchor" href="#一个基础工厂"><span>一个基础工厂</span></a></h2><p>现在让我们定义一个非常基础的工厂。我们打算让它做的是检查看看是否特有标题的书之前已经被创建在系统中；如果存在，就返回，不存在，创建并且存储一本新书，这样，之后就能够访问它。这个确保，我们只能创建每个唯一内部的数据块的单一备份。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Book Factory singleton</span></span>
<span class="line"><span class="token keyword">var</span> BookFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> existingBooks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> existingBook<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">createBook</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> genre<span class="token punctuation">,</span> pageCount<span class="token punctuation">,</span> publisherID<span class="token punctuation">,</span> <span class="token constant">ISBN</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token comment">// Find out if a particular book meta-data combination has been created before</span></span>
<span class="line">      <span class="token comment">// !! or (bang bang) forces a boolean to be returned</span></span>
<span class="line">      existingBook <span class="token operator">=</span> existingBooks<span class="token punctuation">[</span><span class="token constant">ISBN</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span>existingBook <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> existingBook<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">// if not, let&#39;s create a new instance of the book and store it</span></span>
<span class="line">        <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> genre<span class="token punctuation">,</span> pageCount<span class="token punctuation">,</span> publisherID<span class="token punctuation">,</span> <span class="token constant">ISBN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        existingBooks<span class="token punctuation">[</span><span class="token constant">ISBN</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> book<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管理外来的状态" tabindex="-1"><a class="header-anchor" href="#管理外来的状态"><span>管理外来的状态</span></a></h2><p>下一步，我们需要存储从书对象某处移除的状态，幸运地，一个管理器被用来封装它们。一本书对象组合以及被检查出被调用书记录的图书馆成员。我们管理器存储着两个，还包括检查我们的书class享元优化期间剥离的相关逻辑。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// BookRecordManager singleton</span></span>
<span class="line"><span class="token keyword">var</span> BookRecordManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> bookRecordDatabase <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// add a new book into the library system</span></span>
<span class="line">    <span class="token function-variable function">addBookRecord</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> genre<span class="token punctuation">,</span> pageCount<span class="token punctuation">,</span> publisherID<span class="token punctuation">,</span> <span class="token constant">ISBN</span><span class="token punctuation">,</span> checkoutDate<span class="token punctuation">,</span> checkoutMember<span class="token punctuation">,</span> dueReturnDate<span class="token punctuation">,</span> availability</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">var</span> book <span class="token operator">=</span> BookFactory<span class="token punctuation">.</span><span class="token function">createBook</span><span class="token punctuation">(</span> title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> genre<span class="token punctuation">,</span> pageCount<span class="token punctuation">,</span> publisherID<span class="token punctuation">,</span> <span class="token constant">ISBN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      bookRecordDatabase<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">checkoutMember</span><span class="token operator">:</span> checkoutMember<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">checkoutDate</span><span class="token operator">:</span> checkoutDate<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">dueReturnDate</span><span class="token operator">:</span> dueReturnDate<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">availability</span><span class="token operator">:</span> availability<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">book</span><span class="token operator">:</span> book</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">updateCheckoutStatus</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">bookID<span class="token punctuation">,</span> newStatus<span class="token punctuation">,</span> checkoutDate<span class="token punctuation">,</span> checkoutMember<span class="token punctuation">,</span> newReturnDate</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">var</span> record <span class="token operator">=</span> bookRecordDatabase<span class="token punctuation">[</span>bookID<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      record<span class="token punctuation">.</span>availability <span class="token operator">=</span> newStatus<span class="token punctuation">;</span></span>
<span class="line">      record<span class="token punctuation">.</span>checkoutDate <span class="token operator">=</span> checkoutDate<span class="token punctuation">;</span></span>
<span class="line">      record<span class="token punctuation">.</span>checkoutMember <span class="token operator">=</span> checkoutMember<span class="token punctuation">;</span></span>
<span class="line">      record<span class="token punctuation">.</span>dueReturnDate <span class="token operator">=</span> newReturnDate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">extendCheckoutPeriod</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">bookID<span class="token punctuation">,</span> newReturnDate</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      bookRecordDatabase<span class="token punctuation">[</span>bookID<span class="token punctuation">]</span><span class="token punctuation">.</span>dueReturnDate <span class="token operator">=</span> newReturnDate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function-variable function">isPastDue</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">bookID</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">var</span> currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> currentDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> bookRecordDatabase<span class="token punctuation">[</span>bookID<span class="token punctuation">]</span><span class="token punctuation">.</span>dueReturnDate <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="享元模式和dom" tabindex="-1"><a class="header-anchor" href="#享元模式和dom"><span>享元模式和dom</span></a></h2><p>dom支持允许对象监听事件的两种方法，不管是从上到下（捕获），还是从下到上（冒泡）。</p><p>在事件捕获中，事件收件由最外层的元素捕获，以及传播到最内层元素。在事件冒泡中，事件被捕获并且给到最内层元素，接着传播到最外层元素。</p><p>在这个上下文中描述享元的最好比喻Gary Chisholm写的，它是这样的</p><p>尝试把享元想想为池塘。鱼儿打开它的嘴巴，气泡升到表面，一值苍蝇飞在上空，当气泡到达表面时。在这个案例中，我们很容易变换张开嘴巴的的鱼为被点击的按钮，泡泡作为冒泡效果，苍蝇飞离为正在运行的一些函数。</p><p>冒泡被引入来处理状态，其中单个事件可能由多个被定义在不同的dom层级等级的事件处理器来处理。这个发生在哪里，事件冒泡执行定义在最底层的特定元素的事件处理器。从这里来看，事件冒泡上升到包含元素，然后再上升到更高的元素。</p><p>享元能够被进一步用来轻微调整事件冒泡处理，我们很快会看到。</p><h2 id="案例1-中心化事件处理程序" tabindex="-1"><a class="header-anchor" href="#案例1-中心化事件处理程序"><span>案例1：中心化事件处理程序</span></a></h2><p>给我们的第一个实战案例，想想我们有大量相似的文档元素以及相似执行行为当用户行为触碰来执行时</p><p>一般当我们构造自己的手风琴组件时，我们会做什么，菜单或者其他基于列表的部件给每个父容器中的连接元素绑定一个点击事件。替换绑定点击给多个元素，我们很容易连接享元到我们的容器顶部，顶部能够监听来自底部的事件。之后这些会使用一样简单或者复杂的逻辑来处理。</p><p>因为组件的类型经常被提及，每个章节有相同的重复审定。（例如，每个章节一个手风琴），每个可能被点击的元素的行为很有可能非常相似，并且与附近的类似类相关。下面，我们会使用这个信息来构造一个非常基础的使用享元的手。风琴</p><p>这里，一个状态管理器命名空间被用来封装我们的享元，尽管jq被用来绑定一个容器div的初始化绑定。为了确保没有页面没有其他逻辑连接相似行为到容器上，解绑事件首先被应用。</p><p>现在正巧创建，容器中的子元素点击，我们使target的用法检查，它提供一个被点击元素的引用，不管他的父节点是什么。之后，我们使用这个信息处理点击事件，而不需要绑定事件给特定的子系欸但，当我们页面加载时。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code class="language-html"><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>More Info (Address)</span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">           This is more information</span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Even More Info (Map)</span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">          &lt;iframe src=&quot;http://www.map-generator.net/extmap.php?name=London<span class="token entity named-entity" title="&amp;">&amp;amp;</span>address=london%2C%20england<span class="token entity named-entity" title="&amp;">&amp;amp;</span>width=500...gt;&quot;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">var</span> stateManager <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">fly</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">&quot;#container&quot;</span> <span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;div.toggle&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">e</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            self<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>target <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">  <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">elem</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">$</span><span class="token punctuation">(</span> elem <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token string">&quot;span&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span> <span class="token string">&quot;slow&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的收益是，我们正转换许多独立行为到共享中。（可能节省内存）</p><h2 id="案例2-使用享元来做性能优化" tabindex="-1"><a class="header-anchor" href="#案例2-使用享元来做性能优化"><span>案例2：使用享元来做性能优化</span></a></h2><p>在我们的第二个案例中，我们将进一步引用能够使用jq享元来达到的性能收益。</p><p>James之前写过一篇叫做更快的jq的76字节，其中，它提醒我们每次jq执行回调，不管什么类型，我们能够通过this关键字访问函数的上下文。</p><p>不幸的，我们中的许多人使用包裹this在$()中的思想，它意味着，每次一个新的jq实例被不必要地构建，而不是处理这个的案例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;You clicked: &quot;</span> <span class="token operator">+</span> <span class="token function">$</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span> <span class="token string">&quot;id&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// we should avoid using the DOM element to create a</span></span>
<span class="line"><span class="token comment">// jQuery object (with the overhead that comes with it)</span></span>
<span class="line"><span class="token comment">// and just use the DOM element itself like this:</span></span>
<span class="line"> </span>
<span class="line"><span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">&quot;div&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;You clicked:&quot;</span>  <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下面的上下文中，James已经想要使用jq的jq.text，但是他不同意一个新jq对象应该在每次遍历中创建的见解。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于多余的包装，在可能的情况下是哟ingjq的实用程序方法。最好实用jq.methodName(例如，jq.text)相对于jq.fn.methodName。其中，methodName代表一个功能，例如，each()或者text。这个避免每次调用更深层次的抽象或构造一个新jq对象。methodName是库本身在较低级别上使用的功能，用于支持jq.fn.methodName。</p><p>然而因为不是所有的qjue方法都对应单个节点函数，Padolsey建议jq.single功能思维。</p><p>这里的思想是单个被创建的jq对象而且用于每一个jq.single调用(高效，意味着只有一个jq对像被创建。)这个实现能够被在下面找到，而且因为我们合并多个可能的对象数据到一个更中心化的单个结构，技术上来说，也是享元。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">jQuery<span class="token punctuation">.</span>single <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">o</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">   <span class="token keyword">var</span> collection <span class="token operator">=</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">element</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">       <span class="token comment">// Give collection the element:</span></span>
<span class="line">       collection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment">// Return the collection:</span></span>
<span class="line">       <span class="token keyword">return</span> collection<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用链式的实战中的案例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token function">$</span><span class="token punctuation">(</span> <span class="token string">&quot;div&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">   <span class="token keyword">var</span> html <span class="token operator">=</span> jQuery<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> html <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：尽管我们可能相信简答的缓存我们的jq代码只能提供同样的性能收益，Padolsey宣告$.single()仍然值得使用并且能执行的更好，那不是说不能使用任何缓存，只是要留心，这个方法能够有帮助。关于$.single更近一步的详情,我推荐读Padolsey的全文。</p>`,71)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":18,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"2d49c13ed9bce9d80943ebeb16aa5b7770c9292a","time":1606995331000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"a00fe8f98bbb79f999624523c63d1bd983e5e7b4","time":1606821911000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"2cd8f14a6ff7b6dd233a6929522aed199d8d7d95","time":1606735913000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"2421622565f30ccb376a54246e95a475fddb3c2b","time":1606390990000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"2588ecbf370e3d7565203fdf3c6bc1dd9b7b343f","time":1598440472000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"算法+英语："},{"hash":"f84f48ca2b46b48d67e6442134732dd42c11a116","time":1597766382000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"jacascript"},{"hash":"b5bfb66219bb9504b28f6e7874430cdf50311d19","time":1597590917000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"19e9eb18c66100cfc59e853a51f91f7efd0f5f12","time":1596989722000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/12享元模式.md"}');export{i as comp,u as data};
