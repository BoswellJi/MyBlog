import{_ as n,c as s,b as e,o as t}from"./app-B56A7WC8.js";const p={};function c(o,a){return t(),s("div",null,a[0]||(a[0]=[e(`<p>命令模式目的在于封装方法调用，请求或者操作到一个单独的对象里面，而且给我们参数化以及传递可以根据我们的判断执行的方法调用。另外，它能够让我们从实现它们的对象中解耦调用行为的对象，在交换具体类时提供更大程度的整体灵活性。</p><p>具体类在基于类的编程语言的范畴是最好解释的，而且与抽象类的思想有关。一个抽象类定义一个接口，但是不需要提供所有成员函数的实现。它充当一个基类，其他类都是从基类派生的。实现缺少的更能的派生类叫做具体类。</p><p>命令模式背后的一般思想是提供给我们一个从执行命令的任意事情中分离问题命令的责任，委托这个责任给不同的替换对象。</p><p>在实现方面，简单的命令对象将操作和希望调用的对象绑定在一起。它们一致地包含一个执行操作（例如：run().execute()）。所有相同接口的命令对象，可以容易的作为需要交换，而且这个被认为是这个模式巨大好处之一。</p><p>为了演示模块模式，我们打算创建一个简单的汽车购买服务：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">var</span> carManager <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// request information</span></span>
<span class="line">    <span class="token function-variable function">requestInfo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> id</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;The information for &quot;</span> <span class="token operator">+</span> model <span class="token operator">+</span> <span class="token string">&quot; with ID &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot; is foobar&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// purchase the car</span></span>
<span class="line">    <span class="token function-variable function">buyVehicle</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> id</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;You have successfully purchased Item &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;, a &quot;</span> <span class="token operator">+</span> model<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// arrange a viewing</span></span>
<span class="line">    <span class="token function-variable function">arrangeViewing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">model<span class="token punctuation">,</span> id</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token string">&quot;You have successfully booked a viewing of &quot;</span> <span class="token operator">+</span> model <span class="token operator">+</span> <span class="token string">&quot; ( &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot; ) &quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看上面的代码，通过直接访问对象来调用我们carManager方法很繁琐。如果我们认为这并没有什么错，我们会被原谅。技术上，它是完整的有效js。但是，某些情况下，这可能是不利的。</p><p>例如，想想一下，如果carManager背后的核心api修改了。这可能需要所有对象直接访问我们应用程序中的这些方法也需要被修改。这个可以看作耦和层，这与尽量松耦合对象的oop方法相悖。相反地，我们可以通过进一步抽象api来解决这个问题。</p><p>现在，让我们扩展我们的carManager，这样命令模式的应用导致下面： 接受任何能够在carManager上执行的命名方法，传递任何被使用的数据，例如，car模型和id.</p><p>这里是我们想要达到的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;buyVehicle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;453543&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>按照这个结构，我们现在应该给carManager.execute方法添加定义，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">carManager<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">name</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> carManager<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> carManager<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> carManager<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们最后案例调用看起来，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;arrangeViewing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ferrari&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;14523&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;requestInfo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Mondeo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;54323&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;requestInfo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;34232&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">carManager<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> <span class="token string">&quot;buyVehicle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ford Escort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;34232&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15)]))}const l=n(p,[["render",c]]),u=JSON.parse('{"path":"/books/javascript/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html","title":"","lang":"en-US","frontmatter":{},"git":{"updatedTime":1735558340000,"contributors":[{"name":"j哥哥","username":"","email":"aiyoudqrjmz@163.com","commits":1},{"name":"jmz","username":"jmz","email":"mingzhuang.ji@ly.com","commits":16,"url":"https://github.com/jmz"},{"name":"Boswell","username":"Boswell","email":"mingzhuang.ji@ly.com","commits":4,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":2}],"changelog":[{"hash":"dbc456edbfbe7a16e99ef11ad04098fbad26fdc4","time":1735558340000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"chore: 调整结构"},{"hash":"6cd6513af962d39a4becb6d4423104c209684122","time":1702001688000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: monorepo"},{"hash":"f2337734b6270ac051b908354dd6dccce75439f6","time":1660138466000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"chore: 梳理"},{"hash":"40490e61600ecc7dded37e1f242086aa74489f64","time":1653880183000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: lerna"},{"hash":"a91ae3f357e5517c1fe59bdcaee35dcb7f620199","time":1627635031000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"feat: books目录"},{"hash":"1dde0babb74363f0c17a499d62b693c8b4123c68","time":1617954954000,"email":"mingzhuang.ji@ly.com","author":"Boswell","message":"博客：整理博客"},{"hash":"21a984d8237cbb94179c1235309f687e4da9f16e","time":1608203842000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: 命令模式"},{"hash":"e963307b025faae359395d8e53d1b35c90d73c4a","time":1607647015000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"1a56bc069724812d2d83f6599c74d32fddee2d31","time":1606207754000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js"},{"hash":"cf48db9cca43f70ff1fe8b559344e85cc1ac9f9c","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"d50f479780aaaab8ba65a89c9940f78b4170b0ba","time":1604129744000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"项目结构：调整目录结构"},{"hash":"2588ecbf370e3d7565203fdf3c6bc1dd9b7b343f","time":1598440472000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"算法+英语："},{"hash":"f84f48ca2b46b48d67e6442134732dd42c11a116","time":1597766382000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"jacascript"},{"hash":"b5bfb66219bb9504b28f6e7874430cdf50311d19","time":1597590917000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"19e9eb18c66100cfc59e853a51f91f7efd0f5f12","time":1596989722000,"email":"aiyoudqrjmz@163.com","author":"jmz","message":"javascript"},{"hash":"c01bd2bcc502766f19653692fb01cfeb1eb4d946","time":1596113157000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js: book"},{"hash":"42dc7bd3dee2b0ced6653d10971cfab481330b49","time":1596027142000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"js:动态特性"},{"hash":"397136bf7682bc990d13273134fa706dd7c2d2ff","time":1591408571000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"ts:类型系统"},{"hash":"9c87d62d0af195897480580611f95fbb1b05e3af","time":1585723377000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"typescript: 类型定义文件"},{"hash":"895f964871573170c5c68f5733de3787918b5e3d","time":1585571351000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 整理"},{"hash":"db8044554b16a1745884bfd9998fadb86199b704","time":1585556794000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"数据结构: 梳理"},{"hash":"e48f20c1429de7795e4958c1130fecadc186f2de","time":1579244858000,"email":"mingzhuang.ji@ly.com","author":"jmz","message":"graphql apollo ecma，html5新特性测试"},{"hash":"dfa57429b7a71d6c4affa40c44f971dba7ea6a64","time":1566402573000,"email":"aiyoudqrjmz@163.com","author":"j哥哥","message":"添加 weex项目"}]},"filePathRelative":"books/javascript/javascript设计模式/8js设计模式/7命令模式.md"}');export{l as comp,u as data};
