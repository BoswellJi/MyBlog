import{_ as i,c as e,b as a,o}from"./app-B56A7WC8.js";const p="/MyBlog/assets/lvcang3-_nnOMeZC.jpg",c="/MyBlog/assets/lvcang4-txs9iIGj.jpg",s="/MyBlog/assets/lvcang5-CIFWYh9O.jpg",n="/MyBlog/assets/lvcang1-C75qlufe.png",t="/MyBlog/assets/lvcang2-CCnKKXWK.png",d={};function r(h,l){return o(),e("div",null,l[0]||(l[0]=[a('<h1 id="旅仓-pc-前端架构设计与实现" tabindex="-1"><a class="header-anchor" href="#旅仓-pc-前端架构设计与实现"><span>旅仓 PC 前端架构设计与实现</span></a></h1><p><strong>旅仓</strong>是同程旅游授权的全品类的分销网站，包括：旅游线路，酒店，机票，等等产品和服务。</p><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h3><p>旅仓技术方案目前面临几个问题对我们的开发与迭代造成了巨大的负担：</p><ol><li>当前旅仓系统采用的是<code>aps.net mvc</code>的技术架构，前端只是<code>mvc</code>中的<code>v</code>，前后端耦合严重，前端迭代需要依托后端开发，阻塞任务开发与任务发布，特别是巨大的联调成本。</li><li>当前的前端技术栈老旧，技术栈采用的是基于<code>jQuery+plugins</code>的方案，书写复杂业务逻辑很痛苦，甚至都没有模块化解决方案，想想都可怕。</li><li>逻辑复杂且混乱，代码组织结构不清晰，导致维护成本较高，再发展下去肯定会慢慢变的不可维护了，重构迫在眉睫。</li></ol><p>所以进行技术架构，技术栈升级。而且为了不影响业务日常工作开展，我们进行了渐进式的项目演进。</p><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h3><ol><li>架构升级，提高开发人员的开发效率与开发体验，使得项目与技术都能够与时俱进，同时使得开发人员也能够获得技术提升。</li><li>老项目重构，提高项目的可维护性和可扩展性为后续支持项目迭代优化打下坚实基础。</li><li>不影响业务日常工作开展的前提下给业务交付需求开发结果。</li></ol><h3 id="技术方案" tabindex="-1"><a class="header-anchor" href="#技术方案"><span>技术方案</span></a></h3><h4 id="第一阶段" tabindex="-1"><a class="header-anchor" href="#第一阶段"><span>第一阶段</span></a></h4><ol><li><p>开发时进行前后端分离</p><ul><li><p>前后端分离</p><ul><li><p>首先进行前后端分离，让前端拥有前端项目的主动权，独立设计，独立开发，独立部署（面向<code>业务</code>与<code>HTTP API</code>）。解放前端与后端开发阶段的藕断丝连，大家各自职责分明，并行开发。</p><p><img src="'+p+'" alt="图片"></p><div style="text-align:center;color:#999;">(前后端分离之前)</div><p><img src="'+c+'" alt="图片"></p><div style="text-align:center;color:#999;">(前后端分离之后：这也是现代化前端开发的基本开发范式)</div></li></ul></li><li><p>前端项目架构设计</p><ul><li><p>这时候我们需要考虑的事情：我们需要采用什么样的前端架构模式</p><ul><li><p>应用形态定位：PC 旅仓系统是传统的 Web 网站应用，非工具类型的重型应用，非静态的站点，这里其实有点动静结合。</p></li><li><p>应用交互方式：这类应用一般交互方式为页面之间通过超链接的方式进行互相连接，且为了用户查看方便，跳转之间不会覆盖上一个页面，而是在新的页面打开。</p></li><li><p>网站营销需求：需要搜索引擎优化(seo)，每个页面的网页元数据，网页标签元素的语义化等都会优化seo。</p></li></ul></li></ul><blockquote><p><strong>基于以上原因，我们决定采用多页开发架构(MPA)。</strong></p></blockquote><ul><li><p>技术选型：</p><ul><li><p>Vite：项目构建工具</p></li><li><p>Vue3：UI开发</p></li><li><p>Tailwindcss：css的编写</p></li><li><p>Vue Router<code>(可选)</code>：主要是为了复杂页面准备，可能有主页中存在子页面的情况</p></li><li><p>Pinia：复杂数据流管理</p></li><li><p>其他：三方工具库，组件库等</p></li></ul></li><li><p>架构图</p><p><img src="'+s+'" alt="图片"></p><div style="text-align:center;color:#999;">(前端架构图)</div></li><li><p>遇到的一点小问题</p><blockquote><p>因为开发阶段起的是自己的Node服务器，和源服务器跨域了，所以需要让Node开发服务器充当代理服务器，但是因为我们部分页面是直接从老页面重构过来的，后端接口没有重构，且接口路径无规则，导致每个接口都需要代理，vite代理服务器中配置代理路径重写要有一定匹配规则，所以需要全部代理，使用通配符，但是导致页面请求服务器也被代理了。所以我们自己重新开发了一个接口代理服务器代理所有接口。其中解决了利用通配符代理了所有接问题，跨域问题，通信源服务器时身份认证问题（为了尽量少的改动开发服务器的前端代码，我们将需要认证的字段，都硬编码到代理服务器中手动配置）。</p></blockquote></li></ul></li></ul></li><li><p>构建时产物进老项目</p><ul><li><p>从三个方面考虑：</p><ul><li><p>兼容老项目：这样可以让我们把代码部署在一个站点上，新老项目只需要根据<code>url</code>跳转即可。</p></li><li><p>避免技术债务和较大的工作量：原本是想基于ssr技术方案，重新独立部署前端，通过微前端将老项目兼容进来，但是</p><ul><li>因为之前技术栈老旧，踩坑不明确。</li><li>且是多页架构的，这样的话，每个页面都要重新初始化微前端基座，再加载子应用等，重复开销。</li><li>每个页面都要当作一个子应用数量庞大，开发量也大。</li></ul></li><li><p>开发效率，尽快满足业务需求：人少，活多，想尽快上线。</p></li></ul></li><li><p>我们是怎么做的：</p><ul><li>通过编写<code>vite</code>插件，在构建的生命周期钩子中，将对应产物<code>.html</code>写入到对应的<code>C#</code>模板中，同样静态资源<code>css,js,图片</code>都放到<code>asp.net</code>存放的静态文件的文件夹下，c#项目中文件新增删除需要再解决方案的配置文件中体现。我们做了脚本自动改写。</li></ul><div style="text-align:center;margin:10px 0;"><img src="'+n+'"><img src="'+t+'"></div></li></ul></li><li><p>运行时跑在老服务器上</p><ul><li>到这里就结束了</li></ul></li></ol><h4 id="第二阶段-未来计划" tabindex="-1"><a class="header-anchor" href="#第二阶段-未来计划"><span>第二阶段 <em>（未来计划）</em></span></a></h4><p>项目完全不再依赖后端服务器<code>特指的是传统后端服务器，asp.net,java</code>，可独立部署，这个阶段会结合<code>ssr</code>、<code>monorepo</code>做进一步架构探索。</p><p>渲染优化：为了提升渲染性能，首屏渲染指标等，提高用户体验，还需要进一步演化我们的技术方案。</p><p>工程管理：以及我们的H5站，小程序，CRM，可以通过monorepo的大仓来进一步提升工程的管理效率，包之间的复用，工程基建的复用（linter,prettier等）</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ol><li>架构升级，提高开发人员的开发效率与开发体验，更好的做到业务开发的交付。</li><li>从技术角度来看，我们在尽量对齐业界最新技术实践，保持开发人员的核心竞争力。</li><li>从项目角度来看，我们在尽量保持的项目可持续发展（可维护性，可拓展性，可复用性，健壮性等等），与时俱进。</li></ol><h4 id="缺点-展望" tabindex="-1"><a class="header-anchor" href="#缺点-展望"><span>缺点/展望</span></a></h4><ol><li>项目的监控（埋点，异常，性能）缺失，促使我们对问题后知后觉，后续进一步补齐这一块的短板，接入公司的监控平台中去。</li><li>旅仓<code>web</code>网站的应用形态，最终技术方案应该时<code>ssr</code>，这样可以给我们后续的优化，新的技术方案的采用等等带来便利。</li><li>要做精细化拆包，因为多页架构，希望能够将每个页面的依赖控制到最低，以及公共包的缓存。</li><li>构建速度的研究与提速。</li></ol>',20)]))}const g=i(d,[["render",r]]),m=JSON.parse('{"path":"/ppt/%E6%97%85%E4%BB%93PC%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/","title":"旅仓 PC 前端架构设计与实现","lang":"en-US","frontmatter":{},"git":{"updatedTime":1757662997000,"contributors":[{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":1}],"changelog":[{"hash":"2c6cf84d74c706e5c1bcfc6c6cad128d17f43fe7","time":1757662997000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: Flutter ui 分享"}]},"filePathRelative":"ppt/旅仓PC前端架构设计与实现/index.md"}');export{g as comp,m as data};
