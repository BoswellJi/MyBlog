import{_ as n,c as e,b as t,o as p}from"./app-B56A7WC8.js";const l="/MyBlog/assets/ui-equals-function-of-state-DdHUA1C8.png",c="/MyBlog/assets/image%20copy%202-BTftanfF.png",i="/MyBlog/assets/image%20copy-F53EyzPF.png",a="/MyBlog/assets/image-BL6fGazS.png",o="/MyBlog/assets/a0afdedd8ee865e62d36484fe1c431b0--xnkUwrU.jpeg",r="/MyBlog/assets/6089d76fcf75a7676d2df08a7ad3bce0-DeyJ8BEc.jpeg",d="/MyBlog/assets/image%20copy%203-BnytgWn1.png",u="/MyBlog/assets/image-BL6fGazS.png",m={};function h(g,s){return p(),e("div",null,s[0]||(s[0]=[t('<h1 id="flutter-状态管理" tabindex="-1"><a class="header-anchor" href="#flutter-状态管理"><span>Flutter 状态管理</span></a></h1><h2 id="现代ui开发的核心思想" tabindex="-1"><a class="header-anchor" href="#现代ui开发的核心思想"><span>现代UI开发的核心思想</span></a></h2><p><img src="'+l+'" alt=""></p><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><ul><li>声明式</li><li>组件化</li></ul><h3 id="声明式" tabindex="-1"><a class="header-anchor" href="#声明式"><span>声明式</span></a></h3><p><img src="'+c+'" alt=""></p><h3 id="命令式" tabindex="-1"><a class="header-anchor" href="#命令式"><span>命令式</span></a></h3><p><img src="'+i+'" alt=""></p><h3 id="组件化" tabindex="-1"><a class="header-anchor" href="#组件化"><span>组件化</span></a></h3><p><img src="'+a+'" alt=""></p><h2 id="什么是状态" tabindex="-1"><a class="header-anchor" href="#什么是状态"><span>什么是状态</span></a></h2><p><img src="'+o+'" alt=""></p><p>状态是指应用程序中某个特定时刻的所有信息，包括用户输入、网络请求的结果、UI 组件的状态等。状态可以是简单的变量，也可以是复杂的数据结构。状态的变化会影响 UI 的渲染，因此管理好状态是构建现代应用程序的关键。</p><h2 id="什么是状态管理" tabindex="-1"><a class="header-anchor" href="#什么是状态管理"><span>什么是状态管理</span></a></h2><p><img src="'+r+'" alt=""></p><p>状态管理是指在应用程序中管理和维护状态的方式。</p><h2 id="状态管理的方式" tabindex="-1"><a class="header-anchor" href="#状态管理的方式"><span>状态管理的方式</span></a></h2><p>状态管理可以分为以下几种类型：</p><ol><li><strong>本地状态管理</strong>：仅在单个组件内部管理状态，通常使用 <code>setState</code>。</li><li><strong>全局状态管理</strong>：跨多个组件共享状态，常用的库有 Provider 等。</li></ol><h3 id="本地状态管理" tabindex="-1"><a class="header-anchor" href="#本地状态管理"><span>本地状态管理</span></a></h3><p><img src="'+d+'" alt=""></p><p>本地状态管理是指在单个组件内部管理状态，通常使用 <code>setState</code> 方法。它适用于状态较简单的场景，例如表单输入、按钮点击等。</p><h3 id="全局状态管理" tabindex="-1"><a class="header-anchor" href="#全局状态管理"><span>全局状态管理</span></a></h3><p><img src="'+a+`" alt=""></p><p>全局状态管理是指跨多个组件共享状态，常用的库有 Provider、GetX 等。它适用于状态较复杂的场景，例如用户认证、购物车等。</p><h2 id="getx" tabindex="-1"><a class="header-anchor" href="#getx"><span>GetX</span></a></h2><p>GetX 是一个强大的 Flutter 状态管理库，它提供了简单易用的 API 和高性能的状态管理解决方案。GetX 的核心思想是将状态与 UI 解耦，通过响应式编程实现状态的自动更新。使用 GetX，开发者可以轻松地管理应用程序的状态，提高开发效率。</p><h3 id="getx-的主要特点" tabindex="-1"><a class="header-anchor" href="#getx-的主要特点"><span>GetX 的主要特点</span></a></h3><ol><li><strong>简单易用</strong>：GetX 提供了简洁的 API，开发者可以快速上手，减少学习成本。</li><li><strong>高性能</strong>：GetX 采用了高效的状态管理机制，能够在数据变化时快速更新 UI，提升应用性能。</li><li><strong>解耦</strong>：GetX 将状态与 UI 解耦，开发者可以更专注于业务逻辑，提高代码的可维护性。</li><li><strong>响应式编程</strong>：GetX 支持响应式编程，开发者可以轻松实现数据变化自动更新 UI 的功能。</li><li><strong>多功能</strong>：除了状态管理，GetX 还提供了路由管理、依赖注入等功能，减少了对其他库的依赖。</li></ol><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><h3 id="_1-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-安装依赖"><span>1. 安装依赖</span></a></h3><p>在 <code>pubspec.yaml</code> 中添加：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">get</span><span class="token punctuation">:</span> ^4.6.5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-创建-controller" tabindex="-1"><a class="header-anchor" href="#_2-创建-controller"><span>2. 创建 Controller</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart"><pre><code class="language-dart"><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:get/get.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CounterController</span> <span class="token keyword">extends</span> <span class="token class-name">GetxController</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0.</span>obs<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-注入与使用" tabindex="-1"><a class="header-anchor" href="#_3-注入与使用"><span>3. 注入与使用</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart"><pre><code class="language-dart"><span class="line"><span class="token comment">// 注入</span></span>
<span class="line"><span class="token keyword">final</span> <span class="token class-name">CounterController</span> c <span class="token operator">=</span> <span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CounterController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 Obx 监听状态变化</span></span>
<span class="line"><span class="token class-name">Obx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;点击了 </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">c<span class="token punctuation">.</span>count</span><span class="token punctuation">}</span></span><span class="token string"> 次&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用方法</span></span>
<span class="line"><span class="token class-name">ElevatedButton</span><span class="token punctuation">(</span></span>
<span class="line">  onPressed<span class="token punctuation">:</span> c<span class="token punctuation">.</span>increment<span class="token punctuation">,</span></span>
<span class="line">  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;增加&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-路由与依赖注入" tabindex="-1"><a class="header-anchor" href="#_4-路由与依赖注入"><span>4. 路由与依赖注入</span></a></h3><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart"><pre><code class="language-dart"><span class="line"><span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token class-name">DetailPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;id&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取参数</span></span>
<span class="line"><span class="token keyword">final</span> id <span class="token operator">=</span> <span class="token class-name">Get</span><span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;id&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-getx状态更新流程" tabindex="-1"><a class="header-anchor" href="#_5-getx状态更新流程"><span>5. GetX状态更新流程</span></a></h3><p><img src="`+u+'" alt=""></p>',42)]))}const b=n(m,[["render",h]]),f=JSON.parse('{"path":"/flutter/51~57%E8%AF%BE%E6%80%BB%E7%BB%93/","title":"Flutter 状态管理","lang":"en-US","frontmatter":{},"git":{"updatedTime":1755075589000,"contributors":[{"name":"Boswell","username":"Boswell","email":"aiyoudqrjmz@163.com","commits":1,"url":"https://github.com/Boswell"},{"name":"mingzhuang.ji","username":"","email":"mingzhuang.ji@ly.com","commits":3}],"changelog":[{"hash":"22f4b7c76f31dab1a2cec8d4111c8cc284c3f6e3","time":1755075589000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat:  flutter 分享"},{"hash":"12f753a721fab778c1f61f50f9bdeeccfbda8e40","time":1755001876000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: flutter 分享"},{"hash":"9907c9355bbea906ee5bf84b6fd3bdf9934bc36c","time":1754998132000,"email":"mingzhuang.ji@ly.com","author":"mingzhuang.ji","message":"feat: flutter 分享"},{"hash":"6075aa87ca7fac51f3ccf273c7f8f056a5ad891c","time":1754926537000,"email":"aiyoudqrjmz@163.com","author":"Boswell","message":"feat: flutter 状态管理"}]},"filePathRelative":"flutter/51~57课总结/index.md"}');export{b as comp,f as data};
